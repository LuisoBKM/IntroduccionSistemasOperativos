
       expanded  when  a command is read, not when it is executed.  Therefore,
       an alias definition appearing on the same line as another command  does
       not  take  effect  until  the next line of input is read.  The commands
       following the alias definition on that line are not affected by the new
       alias.   This  behavior  is  also an issue when functions are executed.
       Aliases are expanded when a function definition is read, not  when  the
       function  is  executed,  because a function definition is itself a com-
       pound command.  As a consequence, aliases defined in a function are not
       available  until  after  that function is executed.  To be safe, always
       put alias definitions on a separate line, and do not use aalliiaass in  com-
       pound commands.

       For almost every purpose, aliases are superseded by shell functions.

FFUUNNCCTTIIOONNSS
       A  shell  function,  defined  as  described  above under SSHHEELLLL GGRRAAMMMMAARR,
       stores a series of commands for later execution.  When the  name  of  a
       shell  function  is used as a simple command name, the list of commands
       associated with that function name is executed.  Functions are executed
       in  the  context  of  the  current  shell; no new process is created to
       interpret them (contrast this with the execution of  a  shell  script).
       When  a  function is executed, the arguments to the function become the
       positional parameters during its execution.  The special parameter ## is
       updated  to reflect the change.  Special parameter 0 is unchanged.  The
       first element of the FFUUNNCCNNAAMMEE variable is set to the name of the  func-
       tion  while  the function is executing.  All other aspects of the shell
       execution environment are identical between a function and  its  caller
       with the exception that the DDEEBBUUGG and RREETTUURRNN traps (see the description
       of the ttrraapp builtin under SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below) are not  inher-
       ited  unless  the  function has been given the ttrraaccee attribute (see the
       description of the ddeeccllaarree builtin below) or  the  --oo  ffuunnccttrraaccee  shell
       option  has  been enabled with the sseett builtin (in which case all func-
       tions inherit the DDEEBBUUGG and RREETTUURRNN traps).

       Variables local to the function may be declared with the llooccaall  builtin
       command.  Ordinarily, variables and their values are shared between the
       function and its caller.

       If the builtin command rreettuurrnn is executed in a function,  the  function
       completes  and  execution resumes with the next command after the func-
       tion call.  Any command associated with the  RREETTUURRNN  trap  is  executed
       before execution resumes.  When a function completes, the values of the
       positional parameters and the special parameter ## are restored  to  the
       values they had prior to the function’s execution.

       Function  names and definitions may be listed with the --ff option to the
       ddeeccllaarree or ttyyppeesseett builtin commands.  The --FF option to ddeeccllaarree or ttyyppee--
       sseett  will  list the function names only (and optionally the source file
       and line number, if the eexxttddeebbuugg shell option is  enabled).   Functions
       may  be exported so that subshells automatically have them defined with
       the --ff option to the eexxppoorrtt builtin.   A  function  definition  may  be
       deleted  using  the  --ff  option  to the uunnsseett builtin.  Note that shell
       functions and variables with the same name may result in multiple iden-
       tically-named  entries  in  the environment passed to the shell’s chil-
       dren.  Care should be taken in cases where this may cause a problem.

       Functions may be recursive.  No limit  is  imposed  on  the  number  of
       recursive calls.

AARRIITTHHMMEETTIICC EEVVAALLUUAATTIIOONN
       The  shell allows arithmetic expressions to be evaluated, under certain
       circumstances (see the lleett and ddeeccllaarree builtin commands and  AArriitthhmmeettiicc
       EExxppaannssiioonn).   Evaluation  is done in fixed-width integers with no check
       for overflow, though division by 0 is trapped and flagged as an  error.
       The  operators  and their precedence, associativity, and values are the
       same as in the C language.  The following list of operators is  grouped
       into  levels  of  equal-precedence operators.  The levels are listed in
       order of decreasing precedence.

       _i_d++++ _i_d----
              variable post-increment and post-decrement
       ++++_i_d ----_i_d
              variable pre-increment and pre-decrement
       -- ++    unary minus and plus
       !! ~~    logical and bitwise negation
       ****     exponentiation
       ** // %%  multiplication, division, remainder
       ++ --    addition, subtraction
       <<<< >>>>  left and right bitwise shifts
       <<== >>== << >>
              comparison
       ==== !!==  equality and inequality
       &&      bitwise AND
       ^^      bitwise exclusive OR
       ||      bitwise OR
       &&&&     logical AND
       ||||     logical OR
       _e_x_p_r??_e_x_p_r::_e_x_p_r
              conditional operator
       == **== //== %%== ++== --== <<<<== >>>>== &&== ^^== ||==
              assignment
       _e_x_p_r_1 ,, _e_x_p_r_2
              comma

       Shell variables are allowed as operands; parameter  expansion  is  per-
       formed before the expression is evaluated.  Within an expression, shell
       variables may also be referenced by name without  using  the  parameter
       expansion  syntax.  A shell variable that is null or unset evaluates to
       0 when referenced by name without using the parameter expansion syntax.
       The  value  of a variable is evaluated as an arithmetic expression when
       it is referenced, or when a variable which has been given  the  _i_n_t_e_g_e_r
       attribute using ddeeccllaarree --ii is assigned a value.  A null value evaluates
       to 0.  A shell variable need not have its integer attribute  turned  on
       to be used in an expression.

       Constants with a leading 0 are interpreted as octal numbers.  A leading
       0x or  0X  denotes  hexadecimal.   Otherwise,  numbers  take  the  form
       [_b_a_s_e_#]n,  where _b_a_s_e is a decimal number between 2 and 64 representing
       the arithmetic base, and _n is a number in that base.  If _b_a_s_e_# is omit-
       ted,  then  base 10 is used.  The digits greater than 9 are represented
       by the lowercase letters, the uppercase letters,  @,  and  _,  in  that
       order.   If  _b_a_s_e  is less than or equal to 36, lowercase and uppercase
       letters may be used interchangeably to represent numbers between 10 and
       35.

       Operators  are  evaluated  in  order of precedence.  Sub-expressions in
       parentheses are evaluated first and may override the  precedence  rules
       above.

CCOONNDDIITTIIOONNAALL EEXXPPRREESSSSIIOONNSS
       Conditional  expressions  are  used  by the [[[[ compound command and the
       tteesstt and [[ builtin commands to test file attributes and perform  string
       and  arithmetic comparisons.  Expressions are formed from the following
       unary or binary primaries.  If any _f_i_l_e argument to  one  of  the  pri-
       maries is of the form _/_d_e_v_/_f_d_/_n, then file descriptor _n is checked.  If
       the _f_i_l_e argument to  one  of  the  primaries  is  one  of  _/_d_e_v_/_s_t_d_i_n,
       _/_d_e_v_/_s_t_d_o_u_t,  or _/_d_e_v_/_s_t_d_e_r_r, file descriptor 0, 1, or 2, respectively,
       is checked.

       Unless otherwise specified, primaries that operate on files follow sym-
       bolic links and operate on the target of the link, rather than the link
       itself.

       --aa _f_i_l_e
              True if _f_i_l_e exists.
       --bb _f_i_l_e
              True if _f_i_l_e exists and is a block special file.
       --cc _f_i_l_e
              True if _f_i_l_e exists and is a character special file.
       --dd _f_i_l_e
              True if _f_i_l_e exists and is a directory.
       --ee _f_i_l_e
              True if _f_i_l_e exists.
       --ff _f_i_l_e
              True if _f_i_l_e exists and is a regular file.
       --gg _f_i_l_e
              True if _f_i_l_e exists and is set-group-id.
       --hh _f_i_l_e
              True if _f_i_l_e exists and is a symbolic link.
       --kk _f_i_l_e
              True if _f_i_l_e exists and its ‘‘sticky’’ bit is set.
       --pp _f_i_l_e
              True if _f_i_l_e exists and is a named pipe (FIFO).
       --rr _f_i_l_e
              True if _f_i_l_e exists and is readable.
       --ss _f_i_l_e
              True if _f_i_l_e exists and has a size greater than zero.
       --tt _f_d  True if file descriptor _f_d is open and refers to a terminal.
       --uu _f_i_l_e
              True if _f_i_l_e exists and its set-user-id bit is set.
       --ww _f_i_l_e
              True if _f_i_l_e exists and is writable.
       --xx _f_i_l_e
              True if _f_i_l_e exists and is executable.
       --OO _f_i_l_e
              True if _f_i_l_e exists and is owned by the effective user id.
       --GG _f_i_l_e
              True if _f_i_l_e exists and is owned by the effective group id.
       --LL _f_i_l_e
              True if _f_i_l_e exists and is a symbolic link.
       --SS _f_i_l_e
              True if _f_i_l_e exists and is a socket.
       --NN _f_i_l_e
              True if _f_i_l_e exists and has been  modified  since  it  was  last
              read.
       _f_i_l_e_1 -nntt _f_i_l_e_2
              True  if  _f_i_l_e_1  is  newer (according to modification date) than
              _f_i_l_e_2, or if _f_i_l_e_1 exists and _f_i_l_e_2 does not.
       _f_i_l_e_1 -oott _f_i_l_e_2
              True if _f_i_l_e_1 is older than _f_i_l_e_2, or if _f_i_l_e_2 exists and  _f_i_l_e_1
              does not.
       _f_i_l_e_1 --eeff _f_i_l_e_2
              True  if _f_i_l_e_1 and _f_i_l_e_2 refer to the same device and inode num-
              bers.
       --oo _o_p_t_n_a_m_e
              True if shell option  _o_p_t_n_a_m_e  is  enabled.   See  the  list  of
              options  under  the  description  of  the  --oo  option to the sseett
              builtin below.
       --zz _s_t_r_i_n_g
              True if the length of _s_t_r_i_n_g is zero.
       _s_t_r_i_n_g
       --nn _s_t_r_i_n_g
              True if the length of _s_t_r_i_n_g is non-zero.

       _s_t_r_i_n_g_1 ==== _s_t_r_i_n_g_2
              True if the strings are equal.  == may be used in place of ==== for
              strict POSIX compliance.

       _s_t_r_i_n_g_1 !!== _s_t_r_i_n_g_2
              True if the strings are not equal.

       _s_t_r_i_n_g_1 << _s_t_r_i_n_g_2
              True  if  _s_t_r_i_n_g_1  sorts before _s_t_r_i_n_g_2 lexicographically in the
              current locale.

       _s_t_r_i_n_g_1 >> _s_t_r_i_n_g_2
              True if _s_t_r_i_n_g_1 sorts after  _s_t_r_i_n_g_2  lexicographically  in  the
              current locale.

       _a_r_g_1 OOPP _a_r_g_2
              OOPP  is one of --eeqq, --nnee, --lltt, --llee, --ggtt, or --ggee.  These arithmetic
              binary operators return true if _a_r_g_1 is equal to, not equal  to,
              less  than, less than or equal to, greater than, or greater than
              or equal to _a_r_g_2, respectively.  _A_r_g_1 and _a_r_g_2 may  be  positive
              or negative integers.

SSIIMMPPLLEE CCOOMMMMAANNDD EEXXPPAANNSSIIOONN
       When  a  simple  command  is executed, the shell performs the following
       expansions, assignments, and redirections, from left to right.

       1.     The words that the parser has  marked  as  variable  assignments
              (those  preceding  the  command name) and redirections are saved
              for later processing.

       2.     The words that are not variable assignments or redirections  are
              expanded.   If  any words remain after expansion, the first word
              is taken to be the name of the command and the  remaining  words
              are the arguments.

       3.     Redirections are performed as described above under RREEDDIIRREECCTTIIOONN.

       4.     The text after the == in each variable assignment undergoes tilde
              expansion, parameter expansion, command substitution, arithmetic
              expansion, and quote removal before being assigned to the  vari-
              able.

       If no command name results, the variable assignments affect the current
       shell environment.  Otherwise, the variables are added to the  environ-
       ment  of the executed command and do not affect the current shell envi-
       ronment.  If any of the assignments attempts to assign  a  value  to  a
       readonly  variable,  an error occurs, and the command exits with a non-
       zero status.

       If no command name results, redirections  are  performed,  but  do  not
       affect  the  current shell environment.  A redirection error causes the
       command to exit with a non-zero status.

       If there is a command name left after expansion, execution proceeds  as
       described  below.   Otherwise, the command exits.  If one of the expan-
       sions contained a command substitution, the exit status of the  command
       is  the  exit  status  of  the last command substitution performed.  If
       there were no command substitutions, the command exits with a status of
       zero.

CCOOMMMMAANNDD EEXXEECCUUTTIIOONN
       After  a  command  has been split into words, if it results in a simple
       command and an optional list of arguments, the  following  actions  are
       taken.

       If  the  command name contains no slashes, the shell attempts to locate
       it.  If there exists a shell function by that name,  that  function  is
       invoked  as described above in FFUUNNCCTTIIOONNSS.  If the name does not match a
       function, the shell searches for it in the list of shell builtins.   If
       a match is found, that builtin is invoked.

       If  the name is neither a shell function nor a builtin, and contains no
       slashes, bbaasshh searches each element of the PPAATTHH for  a  directory  con-
       taining  an  executable  file  by that name.  BBaasshh uses a hash table to
       remember the full pathnames of executable files (see hhaasshh  under  SSHHEELLLL
       BBUUIILLTTIINN  CCOOMMMMAANNDDSS  below).  A full search of the directories in PPAATTHH is
       performed only if the command is not found in the hash table.   If  the
       search  is  unsuccessful, the shell prints an error message and returns
       an exit status of 127.

       If the search is successful, or if the command  name  contains  one  or
       more slashes, the shell executes the named program in a separate execu-
       tion environment.  Argument 0 is set to the name given, and the remain-
       ing arguments to the command are set to the arguments given, if any.

       If  this  execution fails because the file is not in executable format,
       and the file is not a directory, it is assumed to be a _s_h_e_l_l _s_c_r_i_p_t,  a
       file  containing  shell commands.  A subshell is spawned to execute it.
       This subshell reinitializes itself, so that the effect is as if  a  new
       shell  had  been  invoked to handle the script, with the exception that
       the locations of commands remembered by  the  parent  (see  hhaasshh  below
       under SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS) are retained by the child.

       If  the program is a file beginning with ##!!, the remainder of the first
       line specifies an interpreter for the program.  The shell executes  the
       specified interpreter on operating systems that do not handle this exe-
       cutable format themselves.  The arguments to the interpreter consist of
       a  single optional argument following the interpreter name on the first
       line of the program, followed by the name of the program,  followed  by
       the command arguments, if any.

CCOOMMMMAANNDD EEXXEECCUUTTIIOONN EENNVVIIRROONNMMEENNTT
       The  shell  has an _e_x_e_c_u_t_i_o_n _e_n_v_i_r_o_n_m_e_n_t, which consists of the follow-
       ing:


       ·      open files inherited by the shell at invocation, as modified  by
              redirections supplied to the eexxeecc builtin

       ·      the  current  working directory as set by ccdd, ppuusshhdd, or ppooppdd, or
              inherited by the shell at invocation

       ·      the file creation mode mask as set by uummaasskk  or  inherited  from
              the shell’s parent

       ·      current traps set by ttrraapp

       ·      shell parameters that are set by variable assignment or with sseett
              or inherited from the shell’s parent in the environment

       ·      shell functions defined during execution or inherited  from  the
              shell’s parent in the environment

       ·      options  enabled  at  invocation (either by default or with com-
              mand-line arguments) or by sseett

       ·      options enabled by sshhoopptt

       ·      shell aliases defined with aalliiaass

       ·      various process IDs, including those  of  background  jobs,  the
              value of $$$$, and the value of $$PPPPIIDD

       When  a  simple command other than a builtin or shell function is to be
       executed, it is invoked in a separate execution environment  that  con-
       sists  of the following.  Unless otherwise noted, the values are inher-
       ited from the shell.


       ·      the shell’s open files, plus  any  modifications  and  additions
              specified by redirections to the command

       ·      the current working directory

       ·      the file creation mode mask

       ·      shell  variables  and  functions  marked  for export, along with
              variables exported for the command, passed in the environment

       ·      traps caught by the shell are reset to the values inherited from
              the shell’s parent, and traps ignored by the shell are ignored

       A  command  invoked  in  this  separate  environment  cannot affect the
       shell’s execution environment.

       Command substitution, commands  grouped  with  parentheses,  and  asyn-
       chronous  commands  are  invoked  in  a  subshell environment that is a
       duplicate of the shell environment, except that  traps  caught  by  the
       shell  are reset to the values that the shell inherited from its parent
       at invocation.  Builtin commands that are invoked as part of a pipeline
       are  also executed in a subshell environment.  Changes made to the sub-
       shell environment cannot affect the shell’s execution environment.

       If a command is followed by a && and job  control  is  not  active,  the
       default  standard  input  for  the command is the empty file _/_d_e_v_/_n_u_l_l.
       Otherwise, the invoked command inherits the  file  descriptors  of  the
       calling shell as modified by redirections.

EENNVVIIRROONNMMEENNTT
       When  a  program  is invoked it is given an array of strings called the
       _e_n_v_i_r_o_n_m_e_n_t.   This  is  a  list  of  _n_a_m_e-_v_a_l_u_e  pairs,  of  the  form
       _n_a_m_e=_v_a_l_u_e.

       The  shell  provides  several  ways  to manipulate the environment.  On
       invocation, the shell scans its own environment and creates a parameter
       for  each name found, automatically marking it for _e_x_p_o_r_t to child pro-
       cesses.  Executed commands inherit the  environment.   The  eexxppoorrtt  and
       ddeeccllaarree  --xx  commands allow parameters and functions to be added to and
       deleted from the environment.  If the value of a parameter in the envi-
       ronment  is  modified,  the  new value becomes part of the environment,
       replacing the old.  The environment inherited by any  executed  command
       consists  of the shell’s initial environment, whose values may be modi-
       fied in the shell, less any pairs removed by the  uunnsseett  command,  plus
       any additions via the eexxppoorrtt and ddeeccllaarree --xx commands.

       The  environment  for  any  _s_i_m_p_l_e _c_o_m_m_a_n_d or function may be augmented
       temporarily by prefixing it with parameter  assignments,  as  described
       above in PPAARRAAMMEETTEERRSS.  These assignment statements affect only the envi-
       ronment seen by that command.

       If the --kk option is set (see the sseett builtin command below),  then  _a_l_l
       parameter  assignments are placed in the environment for a command, not
       just those that precede the command name.

       When bbaasshh invokes an external command, the variable __  is  set  to  the
       full  file  name of the command and passed to that command in its envi-
       ronment.

EEXXIITT SSTTAATTUUSS
       For the shell’s purposes, a command which exits with a zero exit status
       has  succeeded.   An exit status of zero indicates success.  A non-zero
       exit status indicates failure.  When a command terminates  on  a  fatal
       signal _N, bbaasshh uses the value of 128+_N as the exit status.

       If  a  command  is  not  found, the child process created to execute it
       returns a status of 127.  If a command is found but is not  executable,
       the return status is 126.

       If a command fails because of an error during expansion or redirection,
       the exit status is greater than zero.

       Shell builtin commands return a status of 0 (_t_r_u_e) if  successful,  and
       non-zero  (_f_a_l_s_e)  if an error occurs while they execute.  All builtins
       return an exit status of 2 to indicate incorrect usage.

       BBaasshh itself returns the exit  status  of  the  last  command  executed,
       unless  a  syntax  error occurs, in which case it exits with a non-zero
       value.  See also the eexxiitt builtin command below.

SSIIGGNNAALLSS
       When bbaasshh is interactive, in the  absence  of  any  traps,  it  ignores
       SSIIGGTTEERRMM (so that kkiillll 00 does not kill an interactive shell), and SSIIGGIINNTT
       is caught and handled (so that the wwaaiitt builtin is interruptible).   In
       all  cases,  bbaasshh  ignores  SSIIGGQQUUIITT.  If job control is in effect, bbaasshh
       ignores SSIIGGTTTTIINN, SSIIGGTTTTOOUU, and SSIIGGTTSSTTPP.

       Non-builtin commands run by bbaasshh have signal handlers set to the values
       inherited  by  the  shell  from its parent.  When job control is not in
       effect, asynchronous commands ignore SSIIGGIINNTT and SSIIGGQQUUIITT in addition  to
       these  inherited handlers.  Commands run as a result of command substi-
       tution ignore the keyboard-generated job control signals SSIIGGTTTTIINN, SSIIGGTT--
       TTOOUU, and SSIIGGTTSSTTPP.

       The  shell  exits by default upon receipt of a SSIIGGHHUUPP.  Before exiting,
       an interactive shell  resends  the  SSIIGGHHUUPP  to  all  jobs,  running  or
       stopped.  Stopped jobs are sent SSIIGGCCOONNTT to ensure that they receive the
       SSIIGGHHUUPP.  To prevent the shell from sending the signal to  a  particular
       job,  it  should be removed from the jobs table with the ddiissoowwnn builtin
       (see SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below) or  marked  to  not  receive  SSIIGGHHUUPP
       using ddiissoowwnn --hh.

       If  the  hhuuppoonneexxiitt  shell  option has been set with sshhoopptt, bbaasshh sends a
       SSIIGGHHUUPP to all jobs when an interactive login shell exits.

       If bbaasshh is waiting for a command to complete and receives a signal  for
       which a trap has been set, the trap will not be executed until the com-
       mand completes.  When bbaasshh is waiting for an asynchronous  command  via
       the  wwaaiitt  builtin, the reception of a signal for which a trap has been
       set will cause the wwaaiitt builtin to return immediately with an exit sta-
       tus greater than 128, immediately after which the trap is executed.

JJOOBB CCOONNTTRROOLL
       _J_o_b  _c_o_n_t_r_o_l  refers  to  the ability to selectively stop (_s_u_s_p_e_n_d) the
       execution of processes and continue (_r_e_s_u_m_e) their execution at a later
       point.   A  user  typically  employs  this  facility via an interactive
       interface supplied jointly by the system’s terminal driver and bbaasshh.

       The shell associates a _j_o_b with each pipeline.  It  keeps  a  table  of
       currently  executing  jobs,  which may be listed with the jjoobbss command.
       When bbaasshh starts a job asynchronously (in the _b_a_c_k_g_r_o_u_n_d), it prints  a
       line that looks like:

              [1] 25647

       indicating that this job is job number 1 and that the process ID of the
       last process in the pipeline associated with this job is 25647.  All of
       the  processes  in a single pipeline are members of the same job.  BBaasshh
       uses the _j_o_b abstraction as the basis for job control.

       To facilitate the implementation of the user interface to job  control,
       the operating system maintains the notion of a _c_u_r_r_e_n_t _t_e_r_m_i_n_a_l _p_r_o_c_e_s_s
       _g_r_o_u_p _I_D.  Members of this process group (processes whose process group
       ID is equal to the current terminal process group ID) receive keyboard-
       generated signals such as SSIIGGIINNTT.  These processes are said  to  be  in
       the  _f_o_r_e_g_r_o_u_n_d.  _B_a_c_k_g_r_o_u_n_d processes are those whose process group ID
       differs from the terminal’s; such processes are immune to keyboard-gen-
       erated  signals.  Only foreground processes are allowed to read from or
       write to the terminal.  Background processes which attempt to read from
       (write to) the terminal are sent a SSIIGGTTTTIINN ((SSIIGGTTTTOOUU)) signal by the ter-
       minal driver, which, unless caught, suspends the process.

       If the operating system on which bbaasshh is running supports job  control,
       bbaasshh contains facilities to use it.  Typing the _s_u_s_p_e_n_d character (typ-
       ically ^^ZZ, Control-Z) while a process is running causes that process to
       be  stopped  and  returns  control to bbaasshh.  Typing the _d_e_l_a_y_e_d _s_u_s_p_e_n_d
       character (typically ^^YY, Control-Y) causes the process  to  be  stopped
       when  it  attempts  to  read input from the terminal, and control to be
       returned to bbaasshh.  The user may then manipulate the state of this  job,
       using  the  bbgg command to continue it in the background, the ffgg command
       to continue it in the foreground, or the kkiillll command to kill it.  A ^^ZZ
       takes effect immediately, and has the additional side effect of causing
       pending output and typeahead to be discarded.

       There are a number of ways to refer to a job in the shell.  The charac-
       ter %% introduces a job name.  Job number _n may be referred to as %%nn.  A
       job may also be referred to using a prefix of the name  used  to  start
       it,  or  using a substring that appears in its command line.  For exam-
       ple, %%ccee refers to a stopped ccee job.  If a prefix matches more than one
       job,  bbaasshh  reports an error.  Using %%??ccee, on the other hand, refers to
       any job containing the string ccee in its command line.  If the substring
       matches  more  than one job, bbaasshh reports an error.  The symbols %%%% and
       %%++ refer to the shell’s notion of the _c_u_r_r_e_n_t _j_o_b, which  is  the  last
       job  stopped  while  it  was  in the foreground or started in the back-
       ground.  The _p_r_e_v_i_o_u_s _j_o_b may be referenced using %%--.  In  output  per-
       taining to jobs (e.g., the output of the jjoobbss command), the current job
       is always flagged with a ++, and the previous job with a --.  A single  %
       (with  no  accompanying  job  specification) also refers to the current
       job.

       Simply naming a job can be used to bring it into the foreground: %%11  is
       a  synonym  for  ‘‘‘‘ffgg %%11’’’’, bringing job 1 from the background into the
       foreground.  Similarly, ‘‘‘‘%%11 &&’’’’  resumes  job  1  in  the  background,
       equivalent to ‘‘‘‘bbgg %%11’’’’.

       The  shell  learns immediately whenever a job changes state.  Normally,
       bbaasshh waits until it is about to print a prompt before reporting changes
       in  a  job’s status so as to not interrupt any other output.  If the --bb
       option to the sseett builtin command is enabled, bbaasshh reports such changes
       immediately.   Any  trap  on  SSIIGGCCHHLLDD  is  executed for each child that
       exits.

       If an attempt to exit bbaasshh is made while jobs are  stopped,  the  shell
       prints a warning message.  The jjoobbss command may then be used to inspect
       their status.  If a second attempt to exit is made without an interven-
       ing  command, the shell does not print another warning, and the stopped
       jobs are terminated.

PPRROOMMPPTTIINNGG
       When executing interactively, bbaasshh displays the primary prompt PPSS11 when
       it  is  ready  to  read a command, and the secondary prompt PPSS22 when it
       needs more input to complete  a  command.   BBaasshh  allows  these  prompt
       strings  to  be  customized  by inserting a number of backslash-escaped
       special characters that are decoded as follows:
              \\aa     an ASCII bell character (07)
              \\dd     the date in "Weekday Month Date" format (e.g.,  "Tue  May
                     26")
              \\DD{{_f_o_r_m_a_t}}
                     the  _f_o_r_m_a_t  is  passed  to _s_t_r_f_t_i_m_e(3) and the result is
                     inserted into the prompt string; an empty _f_o_r_m_a_t  results
                     in a locale-specific time representation.  The braces are
                     required
              \\ee     an ASCII escape character (033)
              \\hh     the hostname up to the first ‘.’
              \\HH     the hostname
              \\jj     the number of jobs currently managed by the shell
              \\ll     the basename of the shell’s terminal device name
              \\nn     newline
              \\rr     carriage return
              \\ss     the name of the shell, the basename of  $$00  (the  portion
                     following the final slash)
              \\tt     the current time in 24-hour HH:MM:SS format
              \\TT     the current time in 12-hour HH:MM:SS format
              \\@@     the current time in 12-hour am/pm format
              \\AA     the current time in 24-hour HH:MM format
              \\uu     the username of the current user
              \\vv     the version of bbaasshh (e.g., 2.00)
              \\VV     the release of bbaasshh, version + patch level (e.g., 2.00.0)
              \\ww     the current working  directory,  with  $$HHOOMMEE  abbreviated
                     with a tilde
              \\WW     the basename of the current working directory, with $$HHOOMMEE
                     abbreviated with a tilde
              \\!!     the history number of this command
              \\##     the command number of this command
              \\$$     if the effective UID is 0, a ##, otherwise a $$
              \\_n_n_n   the character corresponding to the octal number _n_n_n
              \\\\     a backslash
              \\[[     begin a sequence of non-printing characters, which  could
                     be  used  to  embed  a terminal control sequence into the
                     prompt
              \\]]     end a sequence of non-printing characters

       The command number and the history number are  usually  different:  the
       history  number of a command is its position in the history list, which
       may include commands  restored  from  the  history  file  (see  HHIISSTTOORRYY
       below),  while  the  command  number is the position in the sequence of
       commands executed during the current shell session.  After  the  string
       is  decoded,  it is expanded via parameter expansion, command substitu-
       tion, arithmetic expansion, and quote removal, subject to the value  of
       the  pprroommppttvvaarrss  shell option (see the description of the sshhoopptt command
       under SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below).

RREEAADDLLIINNEE
       This is the library that handles reading input when using  an  interac-
       tive shell, unless the ----nnooeeddiittiinngg option is given at shell invocation.
       By default, the line editing commands are similar to those of emacs.  A
       vi-style  line  editing  interface is also available.  To turn off line
       editing after the shell is running, use the ++oo eemmaaccss or ++oo  vvii  options
       to the sseett builtin (see SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below).

   RReeaaddlliinnee NNoottaattiioonn
       In this section, the emacs-style notation is used to denote keystrokes.
       Control keys are denoted by C-_k_e_y, e.g., C-n  means  Control-N.   Simi-
       larly,  _m_e_t_a  keys are denoted by M-_k_e_y, so M-x means Meta-X.  (On key-
       boards without a _m_e_t_a key, M-_x means ESC _x, i.e., press the Escape  key
       then the _x key.  This makes ESC the _m_e_t_a _p_r_e_f_i_x.  The combination M-C-_x
       means ESC-Control-_x, or press the Escape key then hold the Control  key
       while pressing the _x key.)

       Readline commands may be given numeric _a_r_g_u_m_e_n_t_s, which normally act as
       a repeat count.  Sometimes, however, it is the  sign  of  the  argument
       that  is  significant.   Passing  a negative argument to a command that
       acts in the forward direction (e.g., kkiillll--lliinnee) causes that command  to
       act  in  a  backward direction.  Commands whose behavior with arguments
       deviates from this are noted below.

       When a command is described as _k_i_l_l_i_n_g text, the text deleted is  saved
       for possible future retrieval (_y_a_n_k_i_n_g).  The killed text is saved in a
       _k_i_l_l _r_i_n_g.  Consecutive kills cause the text to be accumulated into one
       unit, which can be yanked all at once.  Commands which do not kill text
       separate the chunks of text on the kill ring.

   RReeaaddlliinnee IInniittiiaalliizzaattiioonn
       Readline is customized by putting commands in  an  initialization  file
       (the  _i_n_p_u_t_r_c  file).  The name of this file is taken from the value of
       the IINNPPUUTTRRCC variable.  If  that  variable  is  unset,  the  default  is
       _~_/_._i_n_p_u_t_r_c.   When a program which uses the readline library starts up,
       the initialization file is read, and the key bindings and variables are
       set.   There  are  only  a few basic constructs allowed in the readline
       initialization file.  Blank lines are ignored.  Lines beginning with  a
       ##  are  comments.   Lines  beginning with a $$ indicate conditional con-
       structs.  Other lines denote key bindings and variable settings.

       The default key-bindings may be changed with an  _i_n_p_u_t_r_c  file.   Other
       programs that use this library may add their own commands and bindings.

       For example, placing

              M-Control-u: universal-argument
       or
              C-Meta-u: universal-argument
       into the _i_n_p_u_t_r_c would make M-C-u execute the readline command  _u_n_i_v_e_r_-
       _s_a_l_-_a_r_g_u_m_e_n_t.

       The  following  symbolic  character  names are recognized: _R_U_B_O_U_T, _D_E_L,
       _E_S_C, _L_F_D, _N_E_W_L_I_N_E, _R_E_T, _R_E_T_U_R_N, _S_P_C, _S_P_A_C_E, and _T_A_B.

       In addition to command names, readline allows keys to  be  bound  to  a
       string that is inserted when the key is pressed (a _m_a_c_r_o).

   RReeaaddlliinnee KKeeyy BBiinnddiinnggss
       The  syntax for controlling key bindings in the _i_n_p_u_t_r_c file is simple.
       All that is required is the name of the command or the text of a  macro
       and  a key sequence to which it should be bound. The name may be speci-
       fied in one of two ways: as a symbolic key name, possibly with _M_e_t_a_- or
       _C_o_n_t_r_o_l_- prefixes, or as a key sequence.

       When using the form kkeeyynnaammee:_f_u_n_c_t_i_o_n_-_n_a_m_e or _m_a_c_r_o, _k_e_y_n_a_m_e is the name
       of a key spelled out in English.  For example:

              Control-u: universal-argument
              Meta-Rubout: backward-kill-word
              Control-o: "> output"

       In the above example, _C_-_u is bound to the function  uunniivveerrssaall--aarrgguummeenntt,
       _M_-_D_E_L  is bound to the function bbaacckkwwaarrdd--kkiillll--wwoorrdd, and _C_-_o is bound to
       run the macro expressed on the right hand side (that is, to insert  the
       text ‘‘> output’’ into the line).

       In  the  second  form,  ""kkeeyysseeqq"":_f_u_n_c_t_i_o_n_-_n_a_m_e or _m_a_c_r_o, kkeeyysseeqq differs
       from kkeeyynnaammee above in that strings denoting an entire key sequence  may
       be  specified  by  placing the sequence within double quotes.  Some GNU
       Emacs style key escapes can be used, as in the following  example,  but
       the symbolic character names are not recognized.

              "\C-u": universal-argument
              "\C-x\C-r": re-read-init-file
              "\e[11~": "Function Key 1"

       In this example, _C_-_u is again bound to the function uunniivveerrssaall--aarrgguummeenntt.
       _C_-_x _C_-_r is bound to the function rree--rreeaadd--iinniitt--ffiillee, and _E_S_C _[ _1 _1 _~  is
       bound to insert the text ‘‘Function Key 1’’.

       The full set of GNU Emacs style escape sequences is
              \\CC--    control prefix
              \\MM--    meta prefix
              \\ee     an escape character
              \\\\     backslash
              \\""     literal "
              \\''     literal '

       In  addition  to  the GNU Emacs style escape sequences, a second set of
       backslash escapes is available:
              \\aa     alert (bell)
              \\bb     backspace
              \\dd     delete
              \\ff     form feed
              \\nn     newline
              \\rr     carriage return
              \\tt     horizontal tab
              \\vv     vertical tab
              \\_n_n_n   the eight-bit character whose value is  the  octal  value
                     _n_n_n (one to three digits)
              \\xx_H_H   the  eight-bit  character  whose value is the hexadecimal
                     value _H_H (one or two hex digits)

       When entering the text of a macro, single or double quotes must be used
       to indicate a macro definition.  Unquoted text is assumed to be a func-
       tion name.  In the macro body, the backslash  escapes  described  above
       are  expanded.   Backslash  will quote any other character in the macro
       text, including " and '.

       BBaasshh allows the current readline key bindings to be displayed or  modi-
       fied  with  the bbiinndd builtin command.  The editing mode may be switched
       during interactive use by using  the  --oo  option  to  the  sseett  builtin
       command (see SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below).

   RReeaaddlliinnee VVaarriiaabblleess
       Readline has variables that can be used to further customize its behav-
       ior.  A variable may be set in the _i_n_p_u_t_r_c file with a statement of the
       form

              sseett _v_a_r_i_a_b_l_e_-_n_a_m_e _v_a_l_u_e

       Except  where  noted,  readline variables can take the values OOnn or OOffff
       (without regard to case).  Unrecognized  variable  names  are  ignored.
       When  a variable value is read, empty or null values, "on" (case-insen-
       sitive), and "1" are equivalent to OOnn.  All other values are equivalent
       to OOffff.  The variables and their default values are:

       bbeellll--ssttyyllee ((aauuddiibbllee))
              Controls  what  happens when readline wants to ring the terminal
              bell.  If set to nnoonnee, readline never rings the bell.  If set to
              vviissiibbllee,  readline  uses a visible bell if one is available.  If
              set to aauuddiibbllee, readline attempts to ring the terminal’s bell.
       bbiinndd--ttttyy--ssppeecciiaall--cchhaarrss ((OOnn))
              If set to OOnn, readline attempts to bind the  control  characters
              treated specially by the kernel’s terminal driver to their read-
              line equivalents.
       ccoommmmeenntt--bbeeggiinn ((‘‘‘‘##’’’’))
              The string that is inserted  when  the  readline  iinnsseerrtt--ccoommmmeenntt
              command is executed.  This command is bound to MM--## in emacs mode
              and to ## in vi command mode.
       ccoommpplleettiioonn--iiggnnoorree--ccaassee ((OOffff))
              If set to OOnn, readline performs filename matching and completion
              in a case-insensitive fashion.
       ccoommpplleettiioonn--qquueerryy--iitteemmss ((110000))
              This  determines when the user is queried about viewing the num-
              ber of possible completions generated  by  the  ppoossssiibbllee--ccoommppllee--
              ttiioonnss  command.  It may be set to any integer value greater than
              or equal to zero.  If the  number  of  possible  completions  is
              greater than or equal to the value of this variable, the user is
              asked whether or not he wishes to view them; otherwise they  are
              simply listed on the terminal.
       ccoonnvveerrtt--mmeettaa ((OOnn))
              If  set  to OOnn, readline will convert characters with the eighth
              bit set to an ASCII key sequence by stripping the eighth bit and
              prefixing  an  escape  character (in effect, using escape as the
              _m_e_t_a _p_r_e_f_i_x).
       ddiissaabbllee--ccoommpplleettiioonn ((OOffff))
              If set to OOnn, readline will inhibit word completion.  Completion
              characters  will  be  inserted into the line as if they had been
              mapped to sseellff--iinnsseerrtt.
       eeddiittiinngg--mmooddee ((eemmaaccss))
              Controls whether readline begins with a set of key bindings sim-
              ilar to _e_m_a_c_s or _v_i.  eeddiittiinngg--mmooddee can be set to either eemmaaccss or
              vvii.
       eennaabbllee--kkeeyyppaadd ((OOffff))
              When set to OOnn, readline will try to enable the application key-
              pad  when  it  is  called.  Some systems need this to enable the
              arrow keys.
       eexxppaanndd--ttiillddee ((OOffff))
              If set  to  oonn,  tilde  expansion  is  performed  when  readline
              attempts word completion.
       hhiissttoorryy--pprreesseerrvvee--ppooiinntt ((OOffff))
              If  set  to  oonn, the history code attempts to place point at the
              same location on each history line retrieved with  pprreevviioouuss--hhiiss--
              ttoorryy or nneexxtt--hhiissttoorryy.
       hhoorriizzoonnttaall--ssccrroollll--mmooddee ((OOffff))
              When  set  to  OOnn, makes readline use a single line for display,
              scrolling the input horizontally on a single screen line when it
              becomes  longer  than the screen width rather than wrapping to a
              new line.
       iinnppuutt--mmeettaa ((OOffff))
              If set to OOnn, readline will enable eight-bit input (that is,  it
              will  not  strip  the  high  bit  from the characters it reads),
              regardless of what the terminal claims it can support.  The name
              mmeettaa--ffllaagg is a synonym for this variable.
       iisseeaarrcchh--tteerrmmiinnaattoorrss ((‘‘‘‘CC--[[CC--JJ’’’’))
              The  string  of  characters that should terminate an incremental
              search without subsequently executing the character  as  a  com-
              mand.   If this variable has not been given a value, the charac-
              ters _E_S_C and _C_-_J will terminate an incremental search.
       kkeeyymmaapp ((eemmaaccss))
              Set the current readline keymap.  The set of valid keymap  names
              is  _e_m_a_c_s_,  _e_m_a_c_s_-_s_t_a_n_d_a_r_d_,  _e_m_a_c_s_-_m_e_t_a_, _e_m_a_c_s_-_c_t_l_x_, _v_i_, _v_i_-_c_o_m_-
              _m_a_n_d, and _v_i_-_i_n_s_e_r_t.  _v_i is equivalent to _v_i_-_c_o_m_m_a_n_d;  _e_m_a_c_s  is
              equivalent  to  _e_m_a_c_s_-_s_t_a_n_d_a_r_d.  The default value is _e_m_a_c_s; the
              value of eeddiittiinngg--mmooddee also affects the default keymap.
       mmaarrkk--ddiirreeccttoorriieess ((OOnn))
              If set to OOnn, completed directory names have a slash appended.
       mmaarrkk--mmooddiiffiieedd--lliinneess ((OOffff))
              If set to OOnn, history lines that have  been  modified  are  dis-
              played with a preceding asterisk (**).
       mmaarrkk--ssyymmlliinnkkeedd--ddiirreeccttoorriieess ((OOffff))
              If set to OOnn, completed names which are symbolic links to direc-
              tories  have  a  slash  appended  (subject  to  the   value   of
              mmaarrkk--ddiirreeccttoorriieess).
       mmaattcchh--hhiiddddeenn--ffiilleess ((OOnn))
              This  variable,  when  set to OOnn, causes readline to match files
              whose names begin with a  ‘.’  (hidden  files)  when  performing
              filename  completion,  unless the leading ‘.’ is supplied by the
              user in the filename to be completed.
       oouuttppuutt--mmeettaa ((OOffff))
              If set to OOnn, readline will display characters with  the  eighth
              bit set directly rather than as a meta-prefixed escape sequence.
       ppaaggee--ccoommpplleettiioonnss ((OOnn))
              If set to OOnn, readline uses an internal _m_o_r_e-like pager to  dis-
              play a screenful of possible completions at a time.
       pprriinntt--ccoommpplleettiioonnss--hhoorriizzoonnttaallllyy ((OOffff))
              If  set  to  OOnn,  readline will display completions with matches
              sorted horizontally in alphabetical order, rather than down  the
              screen.
       sshhooww--aallll--iiff--aammbbiigguuoouuss ((OOffff))
              This  alters  the  default behavior of the completion functions.
              If set to oonn, words which have more than one possible completion
              cause  the  matches  to be listed immediately instead of ringing
              the bell.
       sshhooww--aallll--iiff--uunnmmooddiiffiieedd ((OOffff))
              This alters the default behavior of the completion functions  in
              a fashion similar to sshhooww--aallll--iiff--aammbbiigguuoouuss.  If set to oonn, words
              which have more than one possible completion without any  possi-
              ble  partial  completion (the possible completions don’t share a
              common prefix)  cause  the  matches  to  be  listed  immediately
              instead of ringing the bell.
       vviissiibbllee--ssttaattss ((OOffff))
              If  set to OOnn, a character denoting a file’s type as reported by
              _s_t_a_t(2) is appended to the filename when listing  possible  com-
              pletions.

   RReeaaddlliinnee CCoonnddiittiioonnaall CCoonnssttrruuccttss
       Readline  implements  a  facility  similar in spirit to the conditional
       compilation features of the C preprocessor which  allows  key  bindings
       and  variable  settings  to be performed as the result of tests.  There
       are four parser directives used.

       $$iiff    The $$iiff construct allows bindings to be made based on the  edit-
              ing  mode,  the  terminal  being  used, or the application using
              readline.  The text of the test extends to the end of the  line;
              no characters are required to isolate it.

              mmooddee   The  mmooddee==  form  of  the  $$iiff  directive is used to test
                     whether readline is in emacs or vi  mode.   This  may  be
                     used  in  conjunction  with  the  sseett kkeeyymmaapp command, for
                     instance, to  set  bindings  in  the  _e_m_a_c_s_-_s_t_a_n_d_a_r_d  and
                     _e_m_a_c_s_-_c_t_l_x  keymaps  only  if readline is starting out in
                     emacs mode.

              tteerrmm   The tteerrmm== form may be used to  include  terminal-specific
                     key bindings, perhaps to bind the key sequences output by
                     the terminal’s function keys.  The word on the right side
                     of the == is tested against the both full name of the ter-
                     minal and the portion of the  terminal  name  before  the
                     first  --.  This allows _s_u_n to match both _s_u_n and _s_u_n_-_c_m_d,
                     for instance.

              aapppplliiccaattiioonn
                     The aapppplliiccaattiioonn construct is used to include application-
                     specific  settings.   Each  program  using  the  readline
                     library sets the _a_p_p_l_i_c_a_t_i_o_n _n_a_m_e, and an  initialization
                     file can test for a particular value.  This could be used
                     to bind key sequences to functions useful for a  specific
                     program.   For instance, the following command adds a key
                     sequence that quotes the  current  or  previous  word  in
                     Bash:

                     $$iiff Bash
                     # Quote the current or previous word
                     "\C-xq": "\eb\"\ef\""
                     $$eennddiiff

       $$eennddiiff This command, as seen in the previous example, terminates an $$iiff
              command.

       $$eellssee  Commands in this branch of the $$iiff directive are executed if the
              test fails.

       $$iinncclluuddee
              This  directive takes a single filename as an argument and reads
              commands and bindings from that file.  For example, the  follow-
              ing directive would read _/_e_t_c_/_i_n_p_u_t_r_c:

              $$iinncclluuddee  _/_e_t_c_/_i_n_p_u_t_r_c

   SSeeaarrcchhiinngg
       Readline  provides  commands  for searching through the command history
       (see HHIISSTTOORRYY below) for lines containing a specified string.  There are
       two search modes: _i_n_c_r_e_m_e_n_t_a_l and _n_o_n_-_i_n_c_r_e_m_e_n_t_a_l.

       Incremental  searches  begin  before  the  user has finished typing the
       search string.  As each character of the search string is typed,  read-
       line displays the next entry from the history matching the string typed
       so far.  An incremental search requires  only  as  many  characters  as
       needed  to  find  the desired history entry.  The characters present in
       the value of the iisseeaarrcchh--tteerrmmiinnaattoorrss variable are used to terminate  an
       incremental search.  If that variable has not been assigned a value the
       Escape and Control-J characters will terminate an  incremental  search.
       Control-G  will  abort  an  incremental search and restore the original
       line.  When the search is terminated, the history entry containing  the
       search string becomes the current line.

       To  find  other matching entries in the history list, type Control-S or
       Control-R as appropriate.  This will search backward or forward in  the
       history  for  the  next  entry matching the search string typed so far.
       Any other key sequence bound to a readline command will  terminate  the
       search  and  execute that command.  For instance, a _n_e_w_l_i_n_e will termi-
       nate the search and accept the line, thereby executing the command from
       the history list.

       Readline remembers the last incremental search string.  If two Control-
       Rs are typed without any intervening characters defining a  new  search
       string, any remembered search string is used.

       Non-incremental  searches read the entire search string before starting
       to search for matching history lines.  The search string may  be  typed
       by the user or be part of the contents of the current line.

   RReeaaddlliinnee CCoommmmaanndd NNaammeess
       The  following  is  a list of the names of the commands and the default
       key sequences to which they are bound.  Command names without an accom-
       panying key sequence are unbound by default.  In the following descrip-
       tions, _p_o_i_n_t refers to the current cursor position, and _m_a_r_k refers  to
       a  cursor position saved by the sseett--mmaarrkk command.  The text between the
       point and mark is referred to as the _r_e_g_i_o_n.

   CCoommmmaannddss ffoorr MMoovviinngg
       bbeeggiinnnniinngg--ooff--lliinnee ((CC--aa))
              Move to the start of the current line.
       eenndd--ooff--lliinnee ((CC--ee))
              Move to the end of the line.
       ffoorrwwaarrdd--cchhaarr ((CC--ff))
              Move forward a character.
       bbaacckkwwaarrdd--cchhaarr ((CC--bb))
              Move back a character.
       ffoorrwwaarrdd--wwoorrdd ((MM--ff))
              Move forward to the end of the next word.  Words are composed of
              alphanumeric characters (letters and digits).
       bbaacckkwwaarrdd--wwoorrdd ((MM--bb))
              Move  back  to the start of the current or previous word.  Words
              are composed of alphanumeric characters (letters and digits).
       cclleeaarr--ssccrreeeenn ((CC--ll))
              Clear the screen leaving the current line  at  the  top  of  the
              screen.   With  an  argument,  refresh  the current line without
              clearing the screen.
       rreeddrraaww--ccuurrrreenntt--lliinnee
              Refresh the current line.

   CCoommmmaannddss ffoorr MMaanniippuullaattiinngg tthhee HHiissttoorryy
       aacccceepptt--lliinnee ((NNeewwlliinnee,, RReettuurrnn))
              Accept the line regardless of where the cursor is.  If this line
              is  non-empty, add it to the history list according to the state
              of the HHIISSTTCCOONNTTRROOLL variable.  If the line is a modified  history
              line, then restore the history line to its original state.
       pprreevviioouuss--hhiissttoorryy ((CC--pp))
              Fetch the previous command from the history list, moving back in
              the list.
       nneexxtt--hhiissttoorryy ((CC--nn))
              Fetch the next command from the history list, moving forward  in
              the list.
       bbeeggiinnnniinngg--ooff--hhiissttoorryy ((MM--<<))
              Move to the first line in the history.
       eenndd--ooff--hhiissttoorryy ((MM-->>))
              Move  to  the end of the input history, i.e., the line currently
              being entered.
       rreevveerrssee--sseeaarrcchh--hhiissttoorryy ((CC--rr))
              Search backward starting at the current  line  and  moving  ‘up’
              through  the  history  as  necessary.   This  is  an incremental
              search.
       ffoorrwwaarrdd--sseeaarrcchh--hhiissttoorryy ((CC--ss))
              Search forward starting at the current line  and  moving  ‘down’
              through  the  history  as  necessary.   This  is  an incremental
              search.
       nnoonn--iinnccrreemmeennttaall--rreevveerrssee--sseeaarrcchh--hhiissttoorryy ((MM--pp))
              Search backward through the history starting at the current line
              using  a  non-incremental  search  for  a string supplied by the
              user.
       nnoonn--iinnccrreemmeennttaall--ffoorrwwaarrdd--sseeaarrcchh--hhiissttoorryy ((MM--nn))
              Search forward  through  the  history  using  a  non-incremental
              search for a string supplied by the user.
       hhiissttoorryy--sseeaarrcchh--ffoorrwwaarrdd
              Search  forward through the history for the string of characters
              between the start of the current line and the point.  This is  a
              non-incremental search.
       hhiissttoorryy--sseeaarrcchh--bbaacckkwwaarrdd
              Search backward through the history for the string of characters
              between the start of the current line and the point.  This is  a
              non-incremental search.
       yyaannkk--nntthh--aarrgg ((MM--CC--yy))
              Insert  the  first argument to the previous command (usually the
              second word on the previous line) at point.  With an argument _n,
              insert  the _nth word from the previous command (the words in the
              previous command  begin  with  word  0).   A  negative  argument
              inserts the _nth word from the end of the previous command.  Once
              the argument _n is computed, the argument is extracted as if  the
              "!_n" history expansion had been specified.
       yyaannkk--llaasstt--aarrgg ((MM--..,, MM--__))
              Insert  the last argument to the previous command (the last word
              of the  previous  history  entry).   With  an  argument,  behave
              exactly  like  yyaannkk--nntthh--aarrgg.   Successive calls to yyaannkk--llaasstt--aarrgg
              move back through the history list, inserting the last  argument
              of each line in turn.  The history expansion facilities are used
              to extract the last argument, as if the "!$"  history  expansion
              had been specified.
       sshheellll--eexxppaanndd--lliinnee ((MM--CC--ee))
              Expand the line as the shell does.  This performs alias and his-
              tory expansion as well as all of the shell word expansions.  See
              HHIISSTTOORRYY  EEXXPPAANNSSIIOONN below for a description of history expansion.
       hhiissttoorryy--eexxppaanndd--lliinnee ((MM--^^))
              Perform history expansion on  the  current  line.   See  HHIISSTTOORRYY
              EEXXPPAANNSSIIOONN below for a description of history expansion.
       mmaaggiicc--ssppaaccee
              Perform  history  expansion  on  the  current  line and insert a
              space.  See HHIISSTTOORRYY EEXXPPAANNSSIIOONN below for a description of history
              expansion.
       aalliiaass--eexxppaanndd--lliinnee
              Perform  alias expansion on the current line.  See AALLIIAASSEESS above
              for a description of alias expansion.
       hhiissttoorryy--aanndd--aalliiaass--eexxppaanndd--lliinnee
              Perform history and alias expansion on the current line.
       iinnsseerrtt--llaasstt--aarrgguummeenntt ((MM--..,, MM--__))
              A synonym for yyaannkk--llaasstt--aarrgg.
       ooppeerraattee--aanndd--ggeett--nneexxtt ((CC--oo))
              Accept the current line for execution and fetch  the  next  line
              relative  to the current line from the history for editing.  Any
              argument is ignored.
       eeddiitt--aanndd--eexxeeccuuttee--ccoommmmaanndd ((CC--xxCC--ee))
              Invoke an editor on the current command line,  and  execute  the
              result  as  shell  commands.   BBaasshh  attempts to invoke $$FFCCEEDDIITT,
              $$EEDDIITTOORR, and _e_m_a_c_s as the editor, in that order.

   CCoommmmaannddss ffoorr CChhaannggiinngg TTeexxtt
       ddeelleettee--cchhaarr ((CC--dd))
              Delete the character at point.  If point is at the beginning  of
              the  line,  there  are  no  characters in the line, and the last
              character typed was not bound to ddeelleettee--cchhaarr, then return EEOOFF.
       bbaacckkwwaarrdd--ddeelleettee--cchhaarr ((RRuubboouutt))
              Delete the character behind the cursor.  When  given  a  numeric
              argument, save the deleted text on the kill ring.
       ffoorrwwaarrdd--bbaacckkwwaarrdd--ddeelleettee--cchhaarr
              Delete  the  character under the cursor, unless the cursor is at
              the end of the line, in which case the character behind the cur-
              sor is deleted.
       qquuootteedd--iinnsseerrtt ((CC--qq,, CC--vv))
              Add  the next character typed to the line verbatim.  This is how
              to insert characters like CC--qq, for example.
       ttaabb--iinnsseerrtt ((CC--vv TTAABB))
              Insert a tab character.
       sseellff--iinnsseerrtt ((aa,, bb,, AA,, 11,, !!,, ......))
              Insert the character typed.
       ttrraannssppoossee--cchhaarrss ((CC--tt))
              Drag the character before point forward over  the  character  at
              point,  moving point forward as well.  If point is at the end of
              the line, then this transposes the two characters before  point.
              Negative arguments have no effect.
       ttrraannssppoossee--wwoorrddss ((MM--tt))
              Drag  the  word  before  point past the word after point, moving
              point over that word as well.  If point is at  the  end  of  the
              line, this transposes the last two words on the line.
       uuppccaassee--wwoorrdd ((MM--uu))
              Uppercase  the  current  (or  following)  word.  With a negative
              argument, uppercase the previous word, but do not move point.
       ddoowwnnccaassee--wwoorrdd ((MM--ll))
              Lowercase the current (or  following)  word.   With  a  negative
              argument, lowercase the previous word, but do not move point.
       ccaappiittaalliizzee--wwoorrdd ((MM--cc))
              Capitalize  the  current  (or  following) word.  With a negative
              argument, capitalize the previous word, but do not move point.
       oovveerrwwrriittee--mmooddee
              Toggle overwrite mode.  With an explicit positive numeric  argu-
              ment, switches to overwrite mode.  With an explicit non-positive
              numeric argument, switches to insert mode.  This command affects
              only  eemmaaccss mode; vvii mode does overwrite differently.  Each call
              to _r_e_a_d_l_i_n_e_(_) starts in insert mode.  In overwrite mode, charac-
              ters  bound to sseellff--iinnsseerrtt replace the text at point rather than
              pushing the text  to  the  right.   Characters  bound  to  bbaacckk--
              wwaarrdd--ddeelleettee--cchhaarr  replace  the  character  before  point  with a
              space.  By default, this command is unbound.

   KKiilllliinngg aanndd YYaannkkiinngg
       kkiillll--lliinnee ((CC--kk))
              Kill the text from point to the end of the line.
       bbaacckkwwaarrdd--kkiillll--lliinnee ((CC--xx RRuubboouutt))
              Kill backward to the beginning of the line.
       uunniixx--lliinnee--ddiissccaarrdd ((CC--uu))
              Kill backward from point to the  beginning  of  the  line.   The
              killed text is saved on the kill-ring.
       kkiillll--wwhhoollee--lliinnee
              Kill  all  characters on the current line, no matter where point
              is.
       kkiillll--wwoorrdd ((MM--dd))
              Kill from point to the end of the current word,  or  if  between
              words,  to  the  end  of the next word.  Word boundaries are the
              same as those used by ffoorrwwaarrdd--wwoorrdd.
       bbaacckkwwaarrdd--kkiillll--wwoorrdd ((MM--RRuubboouutt))
              Kill the word behind point.  Word boundaries  are  the  same  as
              those used by bbaacckkwwaarrdd--wwoorrdd.
       uunniixx--wwoorrdd--rruubboouutt ((CC--ww))
              Kill  the  word behind point, using white space as a word bound-
              ary.  The killed text is saved on the kill-ring.
       uunniixx--ffiilleennaammee--rruubboouutt
              Kill the word behind point, using  white  space  and  the  slash
              character  as  the word boundaries.  The killed text is saved on
              the kill-ring.
       ddeelleettee--hhoorriizzoonnttaall--ssppaaccee ((MM--\\))
              Delete all spaces and tabs around point.
       kkiillll--rreeggiioonn
              Kill the text in the current region.
       ccooppyy--rreeggiioonn--aass--kkiillll
              Copy the text in the region to the kill buffer.
       ccooppyy--bbaacckkwwaarrdd--wwoorrdd
              Copy the word before point to the kill buffer.  The word  bound-
              aries are the same as bbaacckkwwaarrdd--wwoorrdd.
       ccooppyy--ffoorrwwaarrdd--wwoorrdd
              Copy  the  word  following  point  to the kill buffer.  The word
              boundaries are the same as ffoorrwwaarrdd--wwoorrdd.
       yyaannkk ((CC--yy))
              Yank the top of the kill ring into the buffer at point.
       yyaannkk--ppoopp ((MM--yy))
              Rotate the kill ring, and yank the new top.  Only works  follow-
              ing yyaannkk or yyaannkk--ppoopp.

   NNuummeerriicc AArrgguummeennttss
       ddiiggiitt--aarrgguummeenntt ((MM--00,, MM--11,, ......,, MM----))
              Add  this digit to the argument already accumulating, or start a
              new argument.  M-- starts a negative argument.
       uunniivveerrssaall--aarrgguummeenntt
              This is another way to specify an argument.  If this command  is
              followed  by one or more digits, optionally with a leading minus
              sign, those digits define the argument.  If the command is  fol-
              lowed  by  digits,  executing  uunniivveerrssaall--aarrgguummeenntt again ends the
              numeric argument, but is otherwise ignored.  As a special  case,
              if  this  command is immediately followed by a character that is
              neither a digit or minus sign, the argument count for  the  next
              command  is multiplied by four.  The argument count is initially
              one, so executing this function the first time makes  the  argu-
              ment count four, a second time makes the argument count sixteen,
              and so on.

   CCoommpplleettiinngg
       ccoommpplleettee ((TTAABB))
              Attempt to perform completion on the text  before  point.   BBaasshh
              attempts completion treating the text as a variable (if the text
              begins with $$), username (if the text begins with  ~~),  hostname
              (if  the  text begins with @@), or command (including aliases and
              functions) in turn.  If none of these produces a match, filename
              completion is attempted.
       ppoossssiibbllee--ccoommpplleettiioonnss ((MM--??))
              List the possible completions of the text before point.
       iinnsseerrtt--ccoommpplleettiioonnss ((MM--**))
              Insert  all completions of the text before point that would have
              been generated by ppoossssiibbllee--ccoommpplleettiioonnss.
       mmeennuu--ccoommpplleettee
              Similar to ccoommpplleettee, but replaces the word to be completed  with
              a  single match from the list of possible completions.  Repeated
              execution of mmeennuu--ccoommpplleettee steps through the  list  of  possible
              completions,  inserting  each  match in turn.  At the end of the
              list of completions, the bell is rung (subject to the setting of
              bbeellll--ssttyyllee) and the original text is restored.  An argument of _n
              moves _n positions forward in the list  of  matches;  a  negative
              argument  may  be  used to move backward through the list.  This
              command is intended to be  bound  to  TTAABB,  but  is  unbound  by
              default.
       ddeelleettee--cchhaarr--oorr--lliisstt
              Deletes  the  character under the cursor if not at the beginning
              or end of the line (like ddeelleettee--cchhaarr).  If at  the  end  of  the
              line, behaves identically to ppoossssiibbllee--ccoommpplleettiioonnss.  This command
              is unbound by default.
       ccoommpplleettee--ffiilleennaammee ((MM--//))
              Attempt filename completion on the text before point.
       ppoossssiibbllee--ffiilleennaammee--ccoommpplleettiioonnss ((CC--xx //))
              List the possible completions of the text before point, treating
              it as a filename.
       ccoommpplleettee--uusseerrnnaammee ((MM--~~))
              Attempt  completion  on  the text before point, treating it as a
              username.
       ppoossssiibbllee--uusseerrnnaammee--ccoommpplleettiioonnss ((CC--xx ~~))
              List the possible completions of the text before point, treating
              it as a username.
       ccoommpplleettee--vvaarriiaabbllee ((MM--$$))
              Attempt  completion  on  the text before point, treating it as a
              shell variable.
       ppoossssiibbllee--vvaarriiaabbllee--ccoommpplleettiioonnss ((CC--xx $$))
              List the possible completions of the text before point, treating
              it as a shell variable.
       ccoommpplleettee--hhoossttnnaammee ((MM--@@))
              Attempt  completion  on  the text before point, treating it as a
              hostname.
       ppoossssiibbllee--hhoossttnnaammee--ccoommpplleettiioonnss ((CC--xx @@))
              List the possible completions of the text before point, treating
              it as a hostname.
       ccoommpplleettee--ccoommmmaanndd ((MM--!!))
              Attempt  completion  on  the text before point, treating it as a
              command name.  Command completion attempts  to  match  the  text
              against   aliases,   reserved   words,  shell  functions,  shell
              builtins, and finally executable filenames, in that order.
       ppoossssiibbllee--ccoommmmaanndd--ccoommpplleettiioonnss ((CC--xx !!))
              List the possible completions of the text before point, treating
              it as a command name.
       ddyynnaammiicc--ccoommpplleettee--hhiissttoorryy ((MM--TTAABB))
              Attempt  completion on the text before point, comparing the text
              against lines from the  history  list  for  possible  completion
              matches.
       ccoommpplleettee--iinnttoo--bbrraacceess ((MM--{{))
              Perform filename completion and insert the list of possible com-
              pletions enclosed within braces so the list is available to  the
              shell (see BBrraaccee EExxppaannssiioonn above).

   KKeeyybbooaarrdd MMaaccrrooss
       ssttaarrtt--kkbbdd--mmaaccrroo ((CC--xx (())
              Begin  saving  the  characters  typed  into the current keyboard
              macro.
       eenndd--kkbbdd--mmaaccrroo ((CC--xx ))))
              Stop saving the characters typed into the current keyboard macro
              and store the definition.
       ccaallll--llaasstt--kkbbdd--mmaaccrroo ((CC--xx ee))
              Re-execute  the last keyboard macro defined, by making the char-
              acters in the macro appear as if typed at the keyboard.

   MMiisscceellllaanneeoouuss
       rree--rreeaadd--iinniitt--ffiillee ((CC--xx CC--rr))
              Read in the contents of the _i_n_p_u_t_r_c file,  and  incorporate  any
              bindings or variable assignments found there.
       aabboorrtt ((CC--gg))
              Abort  the  current editing command and ring the terminal’s bell
              (subject to the setting of bbeellll--ssttyyllee).
       ddoo--uuppppeerrccaassee--vveerrssiioonn ((MM--aa,, MM--bb,, MM--_x,, ......))
              If the metafied character _x is lowercase, run the  command  that
              is bound to the corresponding uppercase character.
       pprreeffiixx--mmeettaa ((EESSCC))
              Metafy the next character typed.  EESSCC ff is equivalent to MMeettaa--ff.
       uunnddoo ((CC--__,, CC--xx CC--uu))
              Incremental undo, separately remembered for each line.
       rreevveerrtt--lliinnee ((MM--rr))
              Undo all changes made to this line.  This is like executing  the
              uunnddoo  command  enough  times  to  return the line to its initial
              state.
       ttiillddee--eexxppaanndd ((MM--&&))
              Perform tilde expansion on the current word.
       sseett--mmaarrkk ((CC--@@,, MM--<<ssppaaccee>>))
              Set the mark to the point.  If a numeric argument  is  supplied,
              the mark is set to that position.
       eexxcchhaannggee--ppooiinntt--aanndd--mmaarrkk ((CC--xx CC--xx))
              Swap  the  point  with the mark.  The current cursor position is
              set to the saved position, and the old cursor position is  saved
              as the mark.
       cchhaarraacctteerr--sseeaarrcchh ((CC--]]))
              A character is read and point is moved to the next occurrence of
              that character.  A negative count searches for  previous  occur-
              rences.
       cchhaarraacctteerr--sseeaarrcchh--bbaacckkwwaarrdd ((MM--CC--]]))
              A  character  is  read and point is moved to the previous occur-
              rence of that character.  A negative count searches  for  subse-
              quent occurrences.
       iinnsseerrtt--ccoommmmeenntt ((MM--##))
              Without  a  numeric  argument,  the  value  of the readline ccoomm--
              mmeenntt--bbeeggiinn variable is inserted at the beginning of the  current
              line.  If a numeric argument is supplied, this command acts as a
              toggle:  if the characters at the beginning of the line  do  not
              match  the value of ccoommmmeenntt--bbeeggiinn, the value is inserted, other-
              wise the characters in ccoommmmeenntt--bbeeggiinn are deleted from the begin-
              ning  of the line.  In either case, the line is accepted as if a
              newline had been typed.   The  default  value  of  ccoommmmeenntt--bbeeggiinn
              causes  this  command  to make the current line a shell comment.
              If a  numeric  argument  causes  the  comment  character  to  be
              removed, the line will be executed by the shell.
       gglloobb--ccoommpplleettee--wwoorrdd ((MM--gg))
              The  word  before  point  is  treated  as a pattern for pathname
              expansion, with an asterisk implicitly appended.   This  pattern
              is  used  to generate a list of matching file names for possible
              completions.
       gglloobb--eexxppaanndd--wwoorrdd ((CC--xx **))
              The word before point is  treated  as  a  pattern  for  pathname
              expansion,  and  the  list  of  matching file names is inserted,
              replacing the word.  If  a  numeric  argument  is  supplied,  an
              asterisk is appended before pathname expansion.
       gglloobb--lliisstt--eexxppaannssiioonnss ((CC--xx gg))
              The  list  of  expansions  that  would  have  been  generated by
              gglloobb--eexxppaanndd--wwoorrdd is displayed, and the line is  redrawn.   If  a
              numeric  argument  is  supplied,  an asterisk is appended before
              pathname expansion.
       dduummpp--ffuunnccttiioonnss
              Print all of the functions and their key bindings to  the  read-
              line output stream.  If a numeric argument is supplied, the out-
              put is formatted in such a way that it can be made  part  of  an
              _i_n_p_u_t_r_c file.
       dduummpp--vvaarriiaabblleess
              Print all of the settable readline variables and their values to
              the readline output stream.  If a numeric argument is  supplied,
              the  output  is formatted in such a way that it can be made part
              of an _i_n_p_u_t_r_c file.
       dduummpp--mmaaccrrooss
              Print all of the readline key sequences bound to macros and  the
              strings  they  output.   If  a numeric argument is supplied, the
              output is formatted in such a way that it can be made part of an
              _i_n_p_u_t_r_c file.
       ddiissppllaayy--sshheellll--vveerrssiioonn ((CC--xx CC--vv))
              Display  version information about the current instance of bbaasshh.

   PPrrooggrraammmmaabbllee CCoommpplleettiioonn
       When word completion is attempted for an  argument  to  a  command  for
       which  a  completion  specification (a _c_o_m_p_s_p_e_c) has been defined using
       the ccoommpplleettee builtin (see  SSHHEELLLL  BBUUIILLTTIINN  CCOOMMMMAANNDDSS  below),  the  pro-
       grammable completion facilities are invoked.

       First,  the command name is identified.  If a compspec has been defined
       for that command, the compspec is used to generate the list of possible
       completions  for  the  word.  If the command word is a full pathname, a
       compspec for the full pathname is searched for first.  If  no  compspec
       is  found  for the full pathname, an attempt is made to find a compspec
       for the portion following the final slash.

       Once a compspec has been found, it is used  to  generate  the  list  of
       matching  words.   If a compspec is not found, the default bbaasshh comple-
       tion as described above under CCoommpplleettiinngg is performed.

       First, the actions specified by the compspec are  used.   Only  matches
       which  are prefixed by the word being completed are returned.  When the
       --ff or --dd option is used for filename or directory name completion,  the
       shell variable FFIIGGNNOORREE is used to filter the matches.

       Any  completions  specified  by  a filename expansion pattern to the --GG
       option are generated next.  The words generated by the pattern need not
       match  the  word being completed.  The GGLLOOBBIIGGNNOORREE shell variable is not
       used to filter the matches, but the FFIIGGNNOORREE variable is used.

       Next, the string specified as the argument to the --WW option is  consid-
       ered.   The  string is first split using the characters in the IIFFSS spe-
       cial variable as delimiters.  Shell quoting is honored.  Each  word  is
       then  expanded  using  brace  expansion, tilde expansion, parameter and
       variable expansion, command substitution, and arithmetic expansion,  as
       described above under EEXXPPAANNSSIIOONN.  The results are split using the rules
       described above under WWoorrdd SSpplliittttiinngg.  The results of the expansion are
       prefix-matched against the word being completed, and the matching words
       become the possible completions.

       After these matches have been generated, any shell function or  command
       specified  with  the --FF and --CC options is invoked.  When the command or
       function  is  invoked,  the  CCOOMMPP__LLIINNEE  and  CCOOMMPP__PPOOIINNTT  variables  are
       assigned  values  as described above under SShheellll VVaarriiaabblleess.  If a shell
       function is being invoked, the CCOOMMPP__WWOORRDDSS and CCOOMMPP__CCWWOORRDD variables  are
       also  set.  When the function or command is invoked, the first argument
       is the name of the command whose arguments  are  being  completed,  the
       second  argument is the word being completed, and the third argument is
       the word preceding the word being  completed  on  the  current  command
       line.  No filtering of the generated completions against the word being
       completed is performed; the function or command has complete freedom in
       generating the matches.

       Any  function specified with --FF is invoked first.  The function may use
       any of the shell facilities, including the  ccoommppggeenn  builtin  described
       below,  to  generate the matches.  It must put the possible completions
       in the CCOOMMPPRREEPPLLYY array variable.

       Next, any command specified with the --CC option is invoked in  an  envi-
       ronment  equivalent to command substitution.  It should print a list of
       completions, one per line, to the standard output.   Backslash  may  be
       used to escape a newline, if necessary.

       After  all of the possible completions are generated, any filter speci-
       fied with the --XX option is applied to the list.  The filter is  a  pat-
       tern  as  used  for  pathname expansion; a && in the pattern is replaced
       with the text of the word being completed.  A literal && may be  escaped
       with  a  backslash; the backslash is removed before attempting a match.
       Any completion that matches the pattern will be removed from the  list.
       A leading !! negates the pattern; in this case any completion not match-
       ing the pattern will be removed.

       Finally, any prefix and suffix specified with the --PP and --SS options are
       added to each member of the completion list, and the result is returned
       to the readline completion code as the list of possible completions.

       If the previously-applied actions do not generate any matches, and  the
       --oo  ddiirrnnaammeess  option  was  supplied  to  ccoommpplleettee when the compspec was
       defined, directory name completion is attempted.

       If the --oo pplluussddiirrss option was supplied to ccoommpplleettee  when  the  compspec
       was defined, directory name completion is attempted and any matches are
       added to the results of the other actions.

       By default, if a compspec is found, whatever it generates  is  returned
       to  the  completion  code as the full set of possible completions.  The
       default bbaasshh completions are not attempted, and the readline default of
       filename completion is disabled.  If the --oo bbaasshhddeeffaauulltt option was sup-
       plied to ccoommpplleettee when the compspec was defined, the bbaasshh default  com-
       pletions are attempted if the compspec generates no matches.  If the --oo
       ddeeffaauulltt option was supplied to ccoommpplleettee when the compspec was  defined,
       readline’s  default  completion will be performed if the compspec (and,
       if attempted, the default bbaasshh completions) generate no matches.

       When a compspec indicates that directory name  completion  is  desired,
       the  programmable completion functions force readline to append a slash
       to completed names which are symbolic links to directories, subject  to
       the  value of the mmaarrkk--ddiirreeccttoorriieess readline variable, regardless of the
       setting of the mmaarrkk--ssyymmlliinnkkeedd--ddiirreeccttoorriieess readline variable.

HHIISSTTOORRYY
       When the --oo hhiissttoorryy option to the sseett builtin  is  enabled,  the  shell
       provides access to the _c_o_m_m_a_n_d _h_i_s_t_o_r_y, the list of commands previously
       typed.  The value of the HHIISSTTSSIIZZEE variable is used  as  the  number  of
       commands to save in a history list.  The text of the last HHIISSTTSSIIZZEE com-
       mands (default 500) is saved.  The shell stores  each  command  in  the
       history  list  prior to parameter and variable expansion (see EEXXPPAANNSSIIOONN
       above) but after history expansion is performed, subject to the  values
       of the shell variables HHIISSTTIIGGNNOORREE and HHIISSTTCCOONNTTRROOLL.

       On startup, the history is initialized from the file named by the vari-
       able HHIISSTTFFIILLEE (default _~_/_._b_a_s_h___h_i_s_t_o_r_y).  The file named by  the  value
       of  HHIISSTTFFIILLEE  is  truncated,  if necessary, to contain no more than the
       number of lines specified by the value of HHIISSTTFFIILLEESSIIZZEE.  When an inter-
       active  shell  exits, the last $$HHIISSTTSSIIZZEE lines are copied from the his-
       tory list to $$HHIISSTTFFIILLEE.  If the hhiissttaappppeenndd shell option is enabled (see
       the description of sshhoopptt under SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below), the lines
       are appended to the history file, otherwise the history file  is  over-
       written.   If  HHIISSTTFFIILLEE is unset, or if the history file is unwritable,
       the history is not saved.  After saving the history, the  history  file
       is  truncated to contain no more than HHIISSTTFFIILLEESSIIZZEE lines.  If HHIISSTTFFIILLEE--
       SSIIZZEE is not set, no truncation is performed.

       The builtin command ffcc (see SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below) may  be  used
       to list or edit and re-execute a portion of the history list.  The hhiiss--
       ttoorryy builtin may be used to display or  modify  the  history  list  and
       manipulate  the  history file.  When using command-line editing, search
       commands are available in each editing mode that provide access to  the
       history list.

       The  shell  allows control over which commands are saved on the history
       list.  The HHIISSTTCCOONNTTRROOLL and HHIISSTTIIGGNNOORREE variables may be set to cause the
       shell to save only a subset of the commands entered.  The ccmmddhhiisstt shell
       option, if enabled, causes the shell to attempt to save each line of  a
       multi-line  command  in the same history entry, adding semicolons where
       necessary to preserve syntactic correctness.  The lliitthhiisstt shell  option
       causes  the shell to save the command with embedded newlines instead of
       semicolons.  See the description of the sshhoopptt builtin below under SSHHEELLLL
       BBUUIILLTTIINN  CCOOMMMMAANNDDSS  for  information  on  setting  and  unsetting  shell
       options.

HHIISSTTOORRYY EEXXPPAANNSSIIOONN
       The shell supports a history expansion feature that is similar  to  the
       history  expansion in ccsshh..  This section describes what syntax features
       are available.  This feature is  enabled  by  default  for  interactive
       shells, and can be disabled using the ++HH option to the sseett builtin com-
       mand (see SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS below).  Non-interactive shells do not
       perform history expansion by default.

       History expansions introduce words from the history list into the input
       stream, making it easy to repeat commands, insert the  arguments  to  a
       previous command into the current input line, or fix errors in previous
       commands quickly.

       History expansion is performed immediately after  a  complete  line  is
       read,  before  the  shell  breaks it into words.  It takes place in two
       parts.  The first is to determine which line from the history  list  to
       use during substitution.  The second is to select portions of that line
       for inclusion into the current one.  The line selected from the history
       is  the  _e_v_e_n_t,  and  the portions of that line that are acted upon are
       _w_o_r_d_s.  Various _m_o_d_i_f_i_e_r_s are  available  to  manipulate  the  selected
       words.  The line is broken into words in the same fashion as when read-
       ing input, so that several _m_e_t_a_c_h_a_r_a_c_t_e_r-separated words surrounded  by
       quotes  are  considered one word.  History expansions are introduced by
       the appearance of the  history  expansion  character,  which  is  !!  by
       default.   Only  backslash  (\\) and single quotes can quote the history
       expansion character.

       Several characters inhibit history expansion if found immediately  fol-
       lowing  the history expansion character, even if it is unquoted: space,
       tab, newline, carriage return, and ==.  If the eexxttgglloobb shell  option  is
       enabled, (( will also inhibit expansion.

       Several  shell  options  settable with the sshhoopptt builtin may be used to
       tailor the behavior of history  expansion.   If  the  hhiissttvveerriiffyy  shell
       option is enabled (see the description of the sshhoopptt builtin), and rreeaadd--
       lliinnee is being used, history substitutions are not immediately passed to
       the  shell  parser.   Instead,  the  expanded line is reloaded into the
       rreeaaddlliinnee editing buffer for further modification.  If rreeaaddlliinnee is being
       used, and the hhiissttrreeeeddiitt shell option is enabled, a failed history sub-
       stitution will be reloaded into the rreeaaddlliinnee editing buffer for correc-
       tion.   The --pp option to the hhiissttoorryy builtin command may be used to see
       what a history expansion will do before using it.  The --ss option to the
       hhiissttoorryy  builtin  may be used to add commands to the end of the history
       list without actually executing them, so that they  are  available  for
       subsequent recall.

       The  shell allows control of the various characters used by the history
       expansion mechanism (see the description of hhiissttcchhaarrss above under SShheellll
       VVaarriiaabblleess).

   EEvveenntt DDeessiiggnnaattoorrss
       An  event designator is a reference to a command line entry in the his-
       tory list.

       !!      Start a history substitution, except when followed by  a  bbllaannkk,
              newline,  carriage return, = or ( (when the eexxttgglloobb shell option
              is enabled using the sshhoopptt builtin).
       !!_n     Refer to command line _n.
       !!--_n    Refer to the current command line minus _n.
       !!!!     Refer to the previous command.  This is a synonym for ‘!-1’.
       !!_s_t_r_i_n_g
              Refer to the most recent command starting with _s_t_r_i_n_g.
       !!??_s_t_r_i_n_g[[??]]
              Refer to the most recent command containing _s_t_r_i_n_g.  The  trail-
              ing ?? may be omitted if _s_t_r_i_n_g is followed immediately by a new-
              line.
       ^^_s_t_r_i_n_g_1^^_s_t_r_i_n_g_2^^
              Quick substitution.  Repeat the last command, replacing  _s_t_r_i_n_g_1
              with _s_t_r_i_n_g_2.  Equivalent to ‘‘!!:s/_s_t_r_i_n_g_1/_s_t_r_i_n_g_2/’’ (see MMoodd--
              iiffiieerrss below).
       !!##     The entire command line typed so far.

   WWoorrdd DDeessiiggnnaattoorrss
       Word designators are used to select desired words from the event.  A  ::
       separates  the event specification from the word designator.  It may be
       omitted if the word designator begins with a ^^, $$, **, --, or  %%.   Words
       are  numbered from the beginning of the line, with the first word being
       denoted by 0 (zero).  Words are inserted into the  current  line  sepa-
       rated by single spaces.

       00 ((zzeerroo))
              The zeroth word.  For the shell, this is the command word.
       _n      The _nth word.
       ^^      The first argument.  That is, word 1.
       $$      The last argument.
       %%      The word matched by the most recent ‘?_s_t_r_i_n_g?’ search.
       _x--_y    A range of words; ‘-_y’ abbreviates ‘0-_y’.
       **      All  of  the words but the zeroth.  This is a synonym for ‘_1_-_$’.
              It is not an error to use ** if there is just  one  word  in  the
              event; the empty string is returned in that case.
       xx**     Abbreviates _x_-_$.
       xx--     Abbreviates _x_-_$ like xx**, but omits the last word.

       If  a  word  designator is supplied without an event specification, the
       previous command is used as the event.

   MMooddiiffiieerrss
       After the optional word designator, there may appear a sequence of  one
       or more of the following modifiers, each preceded by a ‘:’.

       hh      Remove a trailing file name component, leaving only the head.
       tt      Remove all leading file name components, leaving the tail.
       rr      Remove a trailing suffix of the form _._x_x_x, leaving the basename.
       ee      Remove all but the trailing suffix.
       pp      Print the new command but do not execute it.
       qq      Quote the substituted words, escaping further substitutions.
       xx      Quote the substituted words as with qq, but break into  words  at
              bbllaannkkss and newlines.
       ss//_o_l_d//_n_e_w//
              Substitute  _n_e_w  for  the  first  occurrence of _o_l_d in the event
              line.  Any delimiter can be used  in  place  of  /.   The  final
              delimiter  is  optional if it is the last character of the event
              line.  The delimiter may be quoted in _o_l_d and _n_e_w with a  single
              backslash.   If & appears in _n_e_w, it is replaced by _o_l_d.  A sin-
              gle backslash will quote the &.  If _o_l_d is null, it  is  set  to
              the  last  _o_l_d substituted, or, if no previous history substitu-
              tions took place, the last _s_t_r_i_n_g in a !!??_s_t_r_i_n_g[[??]]  search.
       &&      Repeat the previous substitution.
       gg      Cause changes to be applied over the entire event line.  This is
              used  in  conjunction  with ‘::ss’ (e.g., ‘::ggss//_o_l_d//_n_e_w//’) or ‘::&&’.
              If used with ‘::ss’, any delimiter can be used in place of /,  and
              the  final  delimiter is optional if it is the last character of
              the event line.  An aa may be used as a synonym for gg.
       GG      Apply the following ‘ss’ modifier once to each word in the  event
              line.

SSHHEELLLL BBUUIILLTTIINN CCOOMMMMAANNDDSS
       Unless otherwise noted, each builtin command documented in this section
       as accepting options preceded by -- accepts ---- to signify the end of the
       options.   For  example,  the  ::, ttrruuee, ffaallssee, and tteesstt builtins do not
       accept options.
       :: [_a_r_g_u_m_e_n_t_s]
              No effect; the command does nothing beyond  expanding  _a_r_g_u_m_e_n_t_s
              and  performing any specified redirections.  A zero exit code is
              returned.

        ..  _f_i_l_e_n_a_m_e [_a_r_g_u_m_e_n_t_s]
       ssoouurrccee _f_i_l_e_n_a_m_e [_a_r_g_u_m_e_n_t_s]
              Read and execute commands from _f_i_l_e_n_a_m_e  in  the  current  shell
              environment  and return the exit status of the last command exe-
              cuted from _f_i_l_e_n_a_m_e.  If _f_i_l_e_n_a_m_e does not contain a slash, file
              names  in  PPAATTHH  are used to find the directory containing _f_i_l_e_-
              _n_a_m_e.  The file searched for in PPAATTHH  need  not  be  executable.
              When  bbaasshh  is  not  in  _p_o_s_i_x  _m_o_d_e,  the  current directory is
              searched if no file is found in PPAATTHH.  If the ssoouurrcceeppaatthh  option
              to  the  sshhoopptt  builtin  command  is turned off, the PPAATTHH is not
              searched.  If any _a_r_g_u_m_e_n_t_s are supplied, they become the  posi-
              tional  parameters  when  _f_i_l_e_n_a_m_e  is  executed.  Otherwise the
              positional parameters are unchanged.  The return status  is  the
              status  of  the  last  command exited within the script (0 if no
              commands are executed), and false if _f_i_l_e_n_a_m_e is  not  found  or
              cannot be read.

       aalliiaass [--pp] [_n_a_m_e[=_v_a_l_u_e] ...]
              AAlliiaass with no arguments or with the --pp option prints the list of
              aliases in the form aalliiaass _n_a_m_e=_v_a_l_u_e on standard  output.   When
              arguments  are supplied, an alias is defined for each _n_a_m_e whose
              _v_a_l_u_e is given.  A trailing space in  _v_a_l_u_e causes the next word
              to be checked for alias substitution when the alias is expanded.
              For each _n_a_m_e in the argument list for which no  _v_a_l_u_e  is  sup-
              plied,  the  name  and  value  of  the  alias is printed.  AAlliiaass
              returns true unless a _n_a_m_e is given for which no alias has  been
              defined.

       bbgg [_j_o_b_s_p_e_c ...]
              Resume  each  suspended  job _j_o_b_s_p_e_c in the background, as if it
              had been started with &&.  If _j_o_b_s_p_e_c is not present, the shell’s
              notion  of the _c_u_r_r_e_n_t _j_o_b is used.  bbgg _j_o_b_s_p_e_c returns 0 unless
              run when job control is disabled or, when run with  job  control
              enabled,  any  specified  _j_o_b_s_p_e_c  was  not found or was started
              without job control.

       bbiinndd [--mm _k_e_y_m_a_p] [--llppssvvPPSSVV]
       bbiinndd [--mm _k_e_y_m_a_p] [--qq _f_u_n_c_t_i_o_n] [--uu _f_u_n_c_t_i_o_n] [--rr _k_e_y_s_e_q]
       bbiinndd [--mm _k_e_y_m_a_p] --ff _f_i_l_e_n_a_m_e
       bbiinndd [--mm _k_e_y_m_a_p] --xx _k_e_y_s_e_q:_s_h_e_l_l_-_c_o_m_m_a_n_d
       bbiinndd [--mm _k_e_y_m_a_p] _k_e_y_s_e_q:_f_u_n_c_t_i_o_n_-_n_a_m_e
       bbiinndd _r_e_a_d_l_i_n_e_-_c_o_m_m_a_n_d
              Display current rreeaaddlliinnee key and function bindings, bind  a  key
              sequence  to  a  rreeaaddlliinnee  function  or macro, or set a rreeaaddlliinnee
              variable.  Each non-option argument is a  command  as  it  would
              appear  in  _._i_n_p_u_t_r_c, but each binding or command must be passed
              as a separate argument; e.g.,  ’"\C-x\C-r":  re-read-init-file’.
              Options, if supplied, have the following meanings:
              --mm _k_e_y_m_a_p
                     Use _k_e_y_m_a_p as the keymap to be affected by the subsequent
                     bindings.  Acceptable _k_e_y_m_a_p names are _e_m_a_c_s_, _e_m_a_c_s_-_s_t_a_n_-
                     _d_a_r_d_,  _e_m_a_c_s_-_m_e_t_a_,  _e_m_a_c_s_-_c_t_l_x_,  _v_i_, _v_i_-_m_o_v_e_, _v_i_-_c_o_m_m_a_n_d,
                     and _v_i_-_i_n_s_e_r_t.  _v_i is equivalent to _v_i_-_c_o_m_m_a_n_d; _e_m_a_c_s  is
                     equivalent to _e_m_a_c_s_-_s_t_a_n_d_a_r_d.
              --ll     List the names of all rreeaaddlliinnee functions.
              --pp     Display  rreeaaddlliinnee  function  names and bindings in such a
                     way that they can be re-read.
              --PP     List current rreeaaddlliinnee function names and bindings.
              --vv     Display rreeaaddlliinnee variable names and values in such a  way
                     that they can be re-read.
              --VV     List current rreeaaddlliinnee variable names and values.
              --ss     Display  rreeaaddlliinnee  key  sequences bound to macros and the
                     strings they output in such a way that they  can  be  re-
                     read.
              --SS     Display  rreeaaddlliinnee  key  sequences bound to macros and the
                     strings they output.
              --ff _f_i_l_e_n_a_m_e
                     Read key bindings from _f_i_l_e_n_a_m_e.
              --qq _f_u_n_c_t_i_o_n
                     Query about which keys invoke the named _f_u_n_c_t_i_o_n.
              --uu _f_u_n_c_t_i_o_n
                     Unbind all keys bound to the named _f_u_n_c_t_i_o_n.
              --rr _k_e_y_s_e_q
                     Remove any current binding for _k_e_y_s_e_q.
              --xx _k_e_y_s_e_q::_s_h_e_l_l_-_c_o_m_m_a_n_d
                     Cause _s_h_e_l_l_-_c_o_m_m_a_n_d to be  executed  whenever  _k_e_y_s_e_q  is
                     entered.

              The  return value is 0 unless an unrecognized option is given or
              an error occurred.

       bbrreeaakk [_n]
              Exit from within a ffoorr, wwhhiillee, uunnttiill, or sseelleecctt loop.  If  _n  is
              specified, break _n levels.  _n must be ≥ 1.  If _n is greater than
              the number of enclosing loops, all enclosing loops  are  exited.
              The  return  value is 0 unless the shell is not executing a loop
              when bbrreeaakk is executed.

       bbuuiillttiinn _s_h_e_l_l_-_b_u_i_l_t_i_n [_a_r_g_u_m_e_n_t_s]
              Execute the specified shell builtin, passing it  _a_r_g_u_m_e_n_t_s,  and
              return its exit status.  This is useful when defining a function
              whose name is the same as a shell builtin, retaining  the  func-
              tionality of the builtin within the function.  The ccdd builtin is
              commonly redefined this way.  The  return  status  is  false  if
              _s_h_e_l_l_-_b_u_i_l_t_i_n is not a shell builtin command.

       ccdd [--LL||--PP] [_d_i_r]
              Change  the  current directory to _d_i_r.  The variable HHOOMMEE is the
              default _d_i_r.  The variable CCDDPPAATTHH defines the  search  path  for
              the  directory  containing  _d_i_r.  Alternative directory names in
              CCDDPPAATTHH are separated by a colon (:).  A null directory  name  in
              CCDDPPAATTHH  is  the  same as the current directory, i.e., ‘‘..’’.  If
              _d_i_r begins with a slash (/), then CCDDPPAATTHH is  not  used.  The  --PP
              option  says  to use the physical directory structure instead of
              following symbolic links (see also the  --PP  option  to  the  sseett
              builtin command); the --LL option forces symbolic links to be fol-
              lowed.  An argument of -- is equivalent to $$OOLLDDPPWWDD.   If  a  non-
              empty  directory  name from CCDDPPAATTHH is used, or if -- is the first
              argument, and the directory change is successful,  the  absolute
              pathname of the new working directory is written to the standard
              output.  The return value is true if the directory was  success-
              fully changed; false otherwise.

       ccaalllleerr [_e_x_p_r]
              Returns the context of any active subroutine call (a shell func-
              tion or a script executed with the .. or ssoouurrccee builtins.   With-
              out _e_x_p_r, ccaalllleerr displays the line number and source filename of
              the current subroutine call.  If a non-negative integer is  sup-
              plied as _e_x_p_r, ccaalllleerr displays the line number, subroutine name,
              and source file corresponding to that position  in  the  current
              execution  call  stack.  This extra information may be used, for
              example, to print a stack trace.  The current frame is frame  0.
              The  return  value is 0 unless the shell is not executing a sub-
              routine call or _e_x_p_r does not correspond to a valid position  in
              the call stack.

       ccoommmmaanndd [--ppVVvv] _c_o_m_m_a_n_d [_a_r_g ...]
              Run  _c_o_m_m_a_n_d  with  _a_r_g_s  suppressing  the normal shell function
              lookup. Only builtin commands or commands found in the PPAATTHH  are
              executed.   If the --pp option is given, the search for _c_o_m_m_a_n_d is
              performed using a default value for PPAATTHH that is  guaranteed  to
              find  all  of  the  standard  utilities.  If either the --VV or --vv
              option is supplied, a description of _c_o_m_m_a_n_d is printed.  The --vv
              option  causes a single word indicating the command or file name
              used to invoke _c_o_m_m_a_n_d to be displayed; the --VV option produces a
              more  verbose  description.  If the --VV or --vv option is supplied,
              the exit status is 0 if _c_o_m_m_a_n_d was found, and  1  if  not.   If
              neither option is supplied and an error occurred or _c_o_m_m_a_n_d can-
              not be found, the exit status is 127.  Otherwise, the exit  sta-
              tus of the ccoommmmaanndd builtin is the exit status of _c_o_m_m_a_n_d.

       ccoommppggeenn [_o_p_t_i_o_n] [_w_o_r_d]
              Generate  possible  completion matches for _w_o_r_d according to the
              _o_p_t_i_o_ns, which may  be  any  option  accepted  by  the  ccoommpplleettee
              builtin  with  the exception of --pp and --rr, and write the matches
              to the standard output.  When using the --FF or  --CC  options,  the
              various  shell  variables  set  by  the  programmable completion
              facilities, while available, will not have useful values.

              The matches will be generated in the same way  as  if  the  pro-
              grammable  completion  code  had  generated them directly from a
              completion specification with the same flags.  If _w_o_r_d is speci-
              fied, only those completions matching _w_o_r_d will be displayed.

              The  return  value is true unless an invalid option is supplied,
              or no matches were generated.

       ccoommpplleettee [--aabbccddeeffggjjkkssuuvv] [--oo _c_o_m_p_-_o_p_t_i_o_n] [--AA _a_c_t_i_o_n] [--GG _g_l_o_b_p_a_t]  [--WW
       _w_o_r_d_l_i_s_t] [--PP _p_r_e_f_i_x] [--SS _s_u_f_f_i_x]
              [--XX _f_i_l_t_e_r_p_a_t] [--FF _f_u_n_c_t_i_o_n] [--CC _c_o_m_m_a_n_d] _n_a_m_e [_n_a_m_e _._._.]
       ccoommpplleettee --pprr [_n_a_m_e ...]
              Specify how arguments to each _n_a_m_e should be completed.  If  the
              --pp  option  is supplied, or if no options are supplied, existing
              completion specifications are printed in a way that allows  them
              to be reused as input.  The --rr option removes a completion spec-
              ification for each _n_a_m_e, or, if no _n_a_m_es are supplied, all  com-
              pletion specifications.

              The  process  of  applying  these completion specifications when
              word completion is  attempted  is  described  above  under  PPrroo--
              ggrraammmmaabbllee CCoommpplleettiioonn.

              Other  options,  if specified, have the following meanings.  The
              arguments to the --GG, --WW, and --XX options (and, if necessary,  the
              --PP  and --SS options) should be quoted to protect them from expan-
              sion before the ccoommpplleettee builtin is invoked.
              --oo _c_o_m_p_-_o_p_t_i_o_n
                      The _c_o_m_p_-_o_p_t_i_o_n controls several aspects  of  the  comp-
                      spec’s  behavior beyond the simple generation of comple-
                      tions.  _c_o_m_p_-_o_p_t_i_o_n may be one of:
                      bbaasshhddeeffaauulltt
                              Perform the rest of the default bbaasshh completions
                              if the compspec generates no matches.
                      ddeeffaauulltt Use  readline’s  default  filename completion if
                              the compspec generates no matches.
                      ddiirrnnaammeess
                              Perform directory name completion if  the  comp-
                              spec generates no matches.
                      ffiilleennaammeess
                              Tell  readline that the compspec generates file-
                              names, so it can perform  any  filename-specific
                              processing  (like  adding  a  slash to directory
                              names or suppressing trailing spaces).  Intended
                              to be used with shell functions.
                      nnoossppaaccee Tell   readline  not  to  append  a  space  (the
                              default) to words completed at the  end  of  the
                              line.
                      pplluussddiirrss
                              After  any  matches  defined by the compspec are
                              generated,   directory   name   completion    is
                              attempted  and  any  matches  are  added  to the
                              results of the other actions.
              --AA _a_c_t_i_o_n
                      The _a_c_t_i_o_n may be one of the  following  to  generate  a
                      list of possible completions:
                      aalliiaass   Alias names.  May also be specified as --aa.
                      aarrrraayyvvaarr
                              Array variable names.
                      bbiinnddiinngg RReeaaddlliinnee key binding names.
                      bbuuiillttiinn Names  of  shell  builtin commands.  May also be
                              specified as --bb.
                      ccoommmmaanndd Command names.  May also be specified as --cc.
                      ddiirreeccttoorryy
                              Directory names.  May also be specified as --dd.
                      ddiissaabblleedd
                              Names of disabled shell builtins.
                      eennaabblleedd Names of enabled shell builtins.
                      eexxppoorrtt  Names of exported shell variables.  May also  be
                              specified as --ee.
                      ffiillee    File names.  May also be specified as --ff.
                      ffuunnccttiioonn
                              Names of shell functions.
                      ggrroouupp   Group names.  May also be specified as --gg.
                      hheellppttooppiicc
                              Help topics as accepted by the hheellpp builtin.
                      hhoossttnnaammee
                              Hostnames,  as  taken from the file specified by
                              the HHOOSSTTFFIILLEE shell variable.
                      jjoobb     Job names, if job control is active.   May  also
                              be specified as --jj.
                      kkeeyywwoorrdd Shell  reserved words.  May also be specified as
                              --kk.
                      rruunnnniinngg Names of running jobs, if job control is active.
                      sseerrvviiccee Service names.  May also be specified as --ss.
                      sseettoopptt  Valid  arguments  for  the  --oo option to the sseett
                              builtin.
                      sshhoopptt   Shell option names  as  accepted  by  the  sshhoopptt
                              builtin.
                      ssiiggnnaall  Signal names.
                      ssttooppppeedd Names of stopped jobs, if job control is active.
                      uusseerr    User names.  May also be specified as --uu.
                      vvaarriiaabbllee
                              Names of all shell variables.  May also be spec-
                              ified as --vv.
              --GG _g_l_o_b_p_a_t
                      The  filename  expansion  pattern _g_l_o_b_p_a_t is expanded to
                      generate the possible completions.
              --WW _w_o_r_d_l_i_s_t
                      The _w_o_r_d_l_i_s_t is split using the characters  in  the  IIFFSS
                      special  variable as delimiters, and each resultant word
                      is expanded.  The possible completions are  the  members
                      of  the  resultant  list which match the word being com-
                      pleted.
              --CC _c_o_m_m_a_n_d
                      _c_o_m_m_a_n_d is executed in a subshell environment,  and  its
                      output is used as the possible completions.
              --FF _f_u_n_c_t_i_o_n
                      The  shell  function _f_u_n_c_t_i_o_n is executed in the current
                      shell environment.  When it finishes, the possible  com-
                      pletions  are  retrieved from the value of the CCOOMMPPRREEPPLLYY
                      array variable.
              --XX _f_i_l_t_e_r_p_a_t
                      _f_i_l_t_e_r_p_a_t is a pattern as used for  filename  expansion.
                      It is applied to the list of possible completions gener-
                      ated by the preceding options and  arguments,  and  each
                      completion  matching _f_i_l_t_e_r_p_a_t is removed from the list.
                      A leading !! in _f_i_l_t_e_r_p_a_t negates the  pattern;  in  this
                      case,  any completion not matching _f_i_l_t_e_r_p_a_t is removed.
              --PP _p_r_e_f_i_x
                      _p_r_e_f_i_x is added at the beginning of each  possible  com-
                      pletion after all other options have been applied.
              --SS _s_u_f_f_i_x
                      _s_u_f_f_i_x is appended to each possible completion after all
                      other options have been applied.

              The return value is true unless an invalid option  is  supplied,
              an  option  other than --pp or --rr is supplied without a _n_a_m_e argu-
              ment, an attempt is made to remove  a  completion  specification
              for a _n_a_m_e for which no specification exists, or an error occurs
              adding a completion specification.

       ccoonnttiinnuuee [_n]
              Resume the next iteration of the enclosing ffoorr, wwhhiillee, uunnttiill, or
              sseelleecctt  loop.   If  _n  is specified, resume at the _nth enclosing
              loop.  _n must be ≥ 1.  If  _n  is  greater  than  the  number  of
              enclosing  loops,  the  last  enclosing  loop (the ‘‘top-level’’
              loop) is resumed.  The return value is 0 unless the shell is not
              executing a loop when ccoonnttiinnuuee is executed.

       ddeeccllaarree [--aaffFFiirrttxx] [--pp] [_n_a_m_e[=_v_a_l_u_e] ...]
       ttyyppeesseett [--aaffFFiirrttxx] [--pp] [_n_a_m_e[=_v_a_l_u_e] ...]
              Declare  variables and/or give them attributes.  If no _n_a_m_es are
              given then display the values of variables.  The --pp option  will
              display  the  attributes  and  values  of each _n_a_m_e.  When --pp is
              used, additional options are ignored.  The  --FF  option  inhibits
              the  display of function definitions; only the function name and
              attributes are printed.  If the eexxttddeebbuugg shell option is enabled
              using  sshhoopptt,  the  source  file  name and line number where the
              function is defined  are  displayed  as  well.   The  --FF  option
              implies  --ff.  The following options can be used to restrict out-
              put to variables with the specified attribute or to  give  vari-
              ables attributes:
              --aa     Each _n_a_m_e is an array variable (see AArrrraayyss above).
              --ff     Use function names only.
              --ii     The variable is treated as an integer; arithmetic evalua-
                     tion (see AARRIITTHHMMEETTIICC EEVVAALLUUAATTIIOONN )) is performed  when  the
                     variable is assigned a value.
              --rr     Make _n_a_m_es readonly.  These names cannot then be assigned
                     values by subsequent assignment statements or unset.
              --tt     Give each _n_a_m_e the  _t_r_a_c_e  attribute.   Traced  functions
                     inherit  the  DDEEBBUUGG  and  RREETTUURRNN  traps  from the calling
                     shell.  The trace attribute has no  special  meaning  for
                     variables.
              --xx     Mark  _n_a_m_es  for  export  to  subsequent commands via the
                     environment.

              Using ‘+’ instead of ‘-’ turns off the attribute  instead,  with
              the  exception that ++aa may not be used to destroy an array vari-
              able.  When used in a function, makes each _n_a_m_e local,  as  with
              the  llooccaall  command.   If a variable name is followed by =_v_a_l_u_e,
              the value of the variable is set to _v_a_l_u_e.  The return value  is
              0 unless an invalid option is encountered, an attempt is made to
              define a function using ‘‘-f foo=bar’’, an attempt  is  made  to
              assign  a  value  to  a readonly variable, an attempt is made to
              assign a value to an array variable without using  the  compound
              assignment  syntax (see AArrrraayyss above), one of the _n_a_m_e_s is not a
              valid shell variable name, an attempt is made to turn off  read-
              only  status for a readonly variable, an attempt is made to turn
              off array status for an array variable, or an attempt is made to
              display a non-existent function with --ff.

       ddiirrss [[--ccllppvv]] [[++_n]] [[--_n]]
              Without  options,  displays  the  list  of  currently remembered
              directories.  The default display  is  on  a  single  line  with
              directory  names  separated by spaces.  Directories are added to
              the list with  the  ppuusshhdd  command;  the  ppooppdd  command  removes
              entries from the list.
              ++_n     Displays the _nth entry counting from the left of the list
                     shown by ddiirrss when invoked without options, starting with
                     zero.
              --_n     Displays  the  _nth  entry  counting from the right of the
                     list shown by ddiirrss when invoked without options, starting
                     with zero.
              --cc     Clears  the  directory  stack  by  deleting  all  of  the
                     entries.
              --ll     Produces a longer listing;  the  default  listing  format
                     uses a tilde to denote the home directory.
              --pp     Print the directory stack with one entry per line.
              --vv     Print  the  directory stack with one entry per line, pre-
                     fixing each entry with its index in the stack.

              The return value is 0 unless an invalid option is supplied or  _n
              indexes beyond the end of the directory stack.

       ddiissoowwnn [--aarr] [--hh] [_j_o_b_s_p_e_c ...]
              Without  options,  each  _j_o_b_s_p_e_c  is  removed  from the table of
              active jobs.  If the --hh option is given,  each  _j_o_b_s_p_e_c  is  not
              removed from the table, but is marked so that SSIIGGHHUUPP is not sent
              to the job if the shell receives a SSIIGGHHUUPP.   If  no  _j_o_b_s_p_e_c  is
              present,  and  neither the --aa nor the --rr option is supplied, the
              _c_u_r_r_e_n_t _j_o_b is used.  If no _j_o_b_s_p_e_c is supplied, the  --aa  option
              means  to  remove or mark all jobs; the --rr option without a _j_o_b_-
              _s_p_e_c argument restricts operation to running jobs.   The  return
              value is 0 unless a _j_o_b_s_p_e_c does not specify a valid job.

       eecchhoo [--nneeEE] [_a_r_g ...]
              Output  the  _a_r_gs,  separated  by spaces, followed by a newline.
              The return status is always 0.  If --nn is specified, the trailing
              newline  is  suppressed.  If the --ee option is given, interpreta-
              tion of the following backslash-escaped characters  is  enabled.
              The  --EE option disables the interpretation of these escape char-
              acters, even on systems where they are interpreted  by  default.
              The  xxppgg__eecchhoo  shell option may be used to dynamically determine
              whether or not eecchhoo expands these escape characters by  default.
              eecchhoo  does  not  interpret  ---- to mean the end of options.  eecchhoo
              interprets the following escape sequences:
              \\aa     alert (bell)
              \\bb     backspace
              \\cc     suppress trailing newline
              \\ee     an escape character
              \\ff     form feed
              \\nn     new line
              \\rr     carriage return
              \\tt     horizontal tab
              \\vv     vertical tab
              \\\\     backslash
              \\00_n_n_n  the eight-bit character whose value is  the  octal  value
                     _n_n_n (zero to three octal digits)
              \\xx_H_H   the  eight-bit  character  whose value is the hexadecimal
                     value _H_H (one or two hex digits)

       eennaabbllee [--aaddnnppss] [--ff _f_i_l_e_n_a_m_e] [_n_a_m_e ...]
              Enable and disable builtin shell commands.  Disabling a  builtin
              allows a disk command which has the same name as a shell builtin
              to be executed without specifying a full pathname,  even  though
              the  shell  normally searches for builtins before disk commands.
              If --nn is used, each  _n_a_m_e  is  disabled;  otherwise,  _n_a_m_e_s  are
              enabled.  For example, to use the tteesstt binary found via the PPAATTHH
              instead of the shell builtin version, run  ‘‘enable  -n  test’’.
              The  --ff  option  means to load the new builtin command _n_a_m_e from
              shared object _f_i_l_e_n_a_m_e, on systems that support dynamic loading.
              The  --dd  option will delete a builtin previously loaded with --ff.
              If no _n_a_m_e arguments are given, or if the --pp option is supplied,
              a  list  of  shell  builtins  is  printed.  With no other option
              arguments, the list consists of all enabled shell builtins.   If
              --nn  is  supplied,  only disabled builtins are printed.  If --aa is
              supplied, the list printed includes all builtins, with an  indi-
              cation  of  whether  or not each is enabled.  If --ss is supplied,
              the output is restricted to the  POSIX  _s_p_e_c_i_a_l  builtins.   The
              return  value is 0 unless a _n_a_m_e is not a shell builtin or there
              is an error loading a new builtin from a shared object.

       eevvaall [_a_r_g ...]
              The _a_r_gs are read and concatenated together into a  single  com-
              mand.   This command is then read and executed by the shell, and
              its exit status is returned as the value of eevvaall.  If there  are
              no _a_r_g_s, or only null arguments, eevvaall returns 0.

       eexxeecc [--ccll] [--aa _n_a_m_e] [_c_o_m_m_a_n_d [_a_r_g_u_m_e_n_t_s]]
              If  _c_o_m_m_a_n_d is specified, it replaces the shell.  No new process
              is created.  The _a_r_g_u_m_e_n_t_s become the arguments to _c_o_m_m_a_n_d.   If
              the --ll option is supplied, the shell places a dash at the begin-
              ning of the zeroth arg passed to _c_o_m_m_a_n_d.  This is what _l_o_g_i_n(1)
              does.  The --cc option causes _c_o_m_m_a_n_d to be executed with an empty
              environment.  If --aa is supplied, the shell passes  _n_a_m_e  as  the
              zeroth  argument  to the executed command.  If _c_o_m_m_a_n_d cannot be
              executed for some reason, a non-interactive shell exits,  unless
              the  shell  option eexxeeccffaaiill is enabled, in which case it returns
              failure.  An interactive shell returns failure if the file  can-
              not  be executed.  If _c_o_m_m_a_n_d is not specified, any redirections
              take effect in the current shell, and the return  status  is  0.
              If there is a redirection error, the return status is 1.

       eexxiitt [_n]
              Cause  the  shell  to exit with a status of _n.  If _n is omitted,
              the exit status is that of the last command executed.  A trap on
              EEXXIITT is executed before the shell terminates.

       eexxppoorrtt [--ffnn] [_n_a_m_e[=_w_o_r_d]] ...
       eexxppoorrtt --pp
              The  supplied _n_a_m_e_s are marked for automatic export to the envi-
              ronment of subsequently executed commands.  If the --ff option  is
              given,  the _n_a_m_e_s refer to functions.  If no _n_a_m_e_s are given, or
              if the --pp option is supplied, a  list  of  all  names  that  are
              exported  in  this  shell  is printed.  The --nn option causes the
              export property to be removed from each  _n_a_m_e.   If  a  variable
              name  is  followed by =_w_o_r_d, the value of the variable is set to
              _w_o_r_d.  eexxppoorrtt returns an exit status  of  0  unless  an  invalid
              option  is  encountered,  one  of the _n_a_m_e_s is not a valid shell
              variable name, or --ff is supplied with a _n_a_m_e that is not a func-
              tion.

       ffcc [--ee _e_n_a_m_e] [--nnllrr] [_f_i_r_s_t] [_l_a_s_t]
       ffcc --ss [_p_a_t=_r_e_p] [_c_m_d]
              Fix  Command.  In the first form, a range of commands from _f_i_r_s_t
              to _l_a_s_t is selected from the history list.  _F_i_r_s_t and  _l_a_s_t  may
              be  specified  as a string (to locate the last command beginning
              with that string) or as a number  (an  index  into  the  history
              list, where a negative number is used as an offset from the cur-
              rent command number).  If _l_a_s_t is not specified it is set to the
              current  command  for  listing (so that ‘‘fc -l -10’’ prints the
              last 10 commands) and to _f_i_r_s_t otherwise.  If _f_i_r_s_t is not spec-
              ified  it is set to the previous command for editing and -16 for
              listing.

              The --nn option suppresses the command numbers when listing.   The
              --rr  option reverses the order of the commands.  If the --ll option
              is given, the commands are listed on  standard  output.   Other-
              wise,  the editor given by _e_n_a_m_e is invoked on a file containing
              those commands.  If _e_n_a_m_e is not given, the value of the  FFCCEEDDIITT
              variable  is used, and the value of EEDDIITTOORR if FFCCEEDDIITT is not set.
              If neither variable is set, _v_i is used.  When  editing  is  com-
              plete, the edited commands are echoed and executed.

              In  the  second form, _c_o_m_m_a_n_d is re-executed after each instance
              of _p_a_t is replaced by _r_e_p.  A useful alias to use with  this  is
              ‘‘r="fc  -s"’’,  so  that  typing ‘‘r cc’’ runs the last command
              beginning with ‘‘cc’’ and typing ‘‘r’’ re-executes the last com-
              mand.

              If  the  first  form  is  used,  the return value is 0 unless an
              invalid option is encountered or _f_i_r_s_t or _l_a_s_t  specify  history
              lines  out  of  range.  If the --ee option is supplied, the return
              value is the value of the last command executed or failure if an
              error occurs with the temporary file of commands.  If the second
              form is used, the return status is that of the  command  re-exe-
              cuted,  unless  _c_m_d  does  not  specify a valid history line, in
              which case ffcc returns failure.

       ffgg [_j_o_b_s_p_e_c]
              Resume _j_o_b_s_p_e_c in the foreground, and make it the  current  job.
              If _j_o_b_s_p_e_c is not present, the shell’s notion of the _c_u_r_r_e_n_t _j_o_b
              is used.  The return value is that of the  command  placed  into
              the  foreground,  or failure if run when job control is disabled
              or, when run with job control enabled, if _j_o_b_s_p_e_c does not spec-
              ify  a  valid  job  or  _j_o_b_s_p_e_c specifies a job that was started
              without job control.

       ggeettooppttss _o_p_t_s_t_r_i_n_g _n_a_m_e [_a_r_g_s]
              ggeettooppttss is used by shell procedures to parse positional  parame-
              ters.   _o_p_t_s_t_r_i_n_g  contains  the  option characters to be recog-
              nized; if a character is followed by  a  colon,  the  option  is
              expected  to have an argument, which should be separated from it
              by white space.  The colon and question mark characters may  not
              be  used as option characters.  Each time it is invoked, ggeettooppttss
              places the next option in the shell variable _n_a_m_e,  initializing
              _n_a_m_e if it does not exist, and the index of the next argument to
              be processed into the variable OOPPTTIINNDD.  OOPPTTIINNDD is initialized to
              1  each  time  the  shell or a shell script is invoked.  When an
              option requires an argument, ggeettooppttss places that  argument  into
              the  variable OOPPTTAARRGG.  The shell does not reset OOPPTTIINNDD automati-
              cally; it must be  manually  reset  between  multiple  calls  to
              ggeettooppttss within the same shell invocation if a new set of parame-
              ters is to be used.

              When the end of options is encountered,  ggeettooppttss  exits  with  a
              return  value  greater than zero.  OOPPTTIINNDD is set to the index of
              the first non-option argument, and nnaammee is set to ?.

              ggeettooppttss normally parses the positional parameters, but  if  more
              arguments are given in _a_r_g_s, ggeettooppttss parses those instead.

              ggeettooppttss  can  report errors in two ways.  If the first character
              of _o_p_t_s_t_r_i_n_g is a colon, _s_i_l_e_n_t error  reporting  is  used.   In
              normal  operation  diagnostic  messages are printed when invalid
              options or missing option arguments  are  encountered.   If  the
              variable  OOPPTTEERRRR  is  set  to  0, no error messages will be dis-
              played, even if the first character of _o_p_t_s_t_r_i_n_g is not a colon.

              If an invalid option is seen, ggeettooppttss places ? into _n_a_m_e and, if
              not silent, prints an  error  message  and  unsets  OOPPTTAARRGG.   If
              ggeettooppttss  is  silent,  the  option  character  found is placed in
              OOPPTTAARRGG and no diagnostic message is printed.

              If a required argument is not found, and ggeettooppttss is not  silent,
              a  question  mark  (??) is placed in _n_a_m_e, OOPPTTAARRGG is unset, and a
              diagnostic message is printed.  If ggeettooppttss  is  silent,  then  a
              colon  (::)  is  placed  in  _n_a_m_e and OOPPTTAARRGG is set to the option
              character found.

              ggeettooppttss returns true if an option, specified or unspecified,  is
              found.  It returns false if the end of options is encountered or
              an error occurs.

       hhaasshh [--llrr] [--pp _f_i_l_e_n_a_m_e] [--ddtt] [_n_a_m_e]
              For each _n_a_m_e, the full file name of the command  is  determined
              by searching the directories in $$PPAATTHH and remembered.  If the --pp
              option is supplied, no path search is performed, and _f_i_l_e_n_a_m_e is
              used as the full file name of the command.  The --rr option causes
              the shell to forget all remembered  locations.   The  --dd  option
              causes the shell to forget the remembered location of each _n_a_m_e.
              If the --tt option is supplied, the full pathname  to  which  each
              _n_a_m_e  corresponds  is  printed.   If multiple _n_a_m_e arguments are
              supplied with --tt, the _n_a_m_e is printed  before  the  hashed  full
              pathname.  The --ll option causes output to be displayed in a for-
              mat that may be reused as input.  If no arguments are given,  or
              if only --ll is supplied, information about remembered commands is
              printed.  The return status is true unless a _n_a_m_e is  not  found
              or an invalid option is supplied.

       hheellpp [--ss] [_p_a_t_t_e_r_n]
              Display  helpful information about builtin commands.  If _p_a_t_t_e_r_n
              is specified, hheellpp gives detailed help on all commands  matching
              _p_a_t_t_e_r_n;  otherwise  help for all the builtins and shell control
              structures is printed.  The --ss option restricts the  information
              displayed  to  a  short  usage synopsis.  The return status is 0
              unless no command matches _p_a_t_t_e_r_n.

       hhiissttoorryy [[_n]]
       hhiissttoorryy --cc
       hhiissttoorryy --dd _o_f_f_s_e_t
       hhiissttoorryy --aannrrww [_f_i_l_e_n_a_m_e]
       hhiissttoorryy --pp _a_r_g [_a_r_g _._._.]
       hhiissttoorryy --ss _a_r_g [_a_r_g _._._.]
              With no options, display the command history list with line num-
              bers.  Lines listed with a ** have been modified.  An argument of
              _n lists only the last _n lines.  If the shell variable  HHIISSTTTTIIMMEE--
              FFOORRMMAATT  is  set  and not null, it is used as a format string for
              _s_t_r_f_t_i_m_e(3) to display the time stamp associated with each  dis-
              played  history  entry.  No intervening blank is printed between
              the formatted time stamp and the history line.  If  _f_i_l_e_n_a_m_e  is
              supplied,  it  is  used as the name of the history file; if not,
              the value of HHIISSTTFFIILLEE is used.  Options, if supplied,  have  the
              following meanings:
              --cc     Clear the history list by deleting all the entries.
              --dd _o_f_f_s_e_t
                     Delete the history entry at position _o_f_f_s_e_t.
              --aa     Append  the  ‘‘new’’ history lines (history lines entered
                     since the beginning of the current bbaasshh session)  to  the
                     history file.
              --nn     Read  the history lines not already read from the history
                     file into the current  history  list.   These  are  lines
                     appended  to  the history file since the beginning of the
                     current bbaasshh session.
              --rr     Read the contents of the history file and use them as the
                     current history.
              --ww     Write  the current history to the history file, overwrit-
                     ing the history file’s contents.
              --pp     Perform history substitution on the  following  _a_r_g_s  and
                     display  the  result  on  the  standard output.  Does not
                     store the results in the history list.  Each _a_r_g must  be
                     quoted to disable normal history expansion.
              --ss     Store  the  _a_r_g_s  in  the history list as a single entry.
                     The last command in the history list  is  removed  before
                     the _a_r_g_s are added.

              If the HHIISSTTTTIIMMEEFFOORRMMAATT is set, the time stamp information associ-
              ated with each history entry is written  to  the  history  file.
              The  return  value is 0 unless an invalid option is encountered,
              an error occurs while reading or writing the  history  file,  an
              invalid  _o_f_f_s_e_t is supplied as an argument to --dd, or the history
              expansion supplied as an argument to --pp fails.

       jjoobbss [--llnnpprrss] [ _j_o_b_s_p_e_c ... ]
       jjoobbss --xx _c_o_m_m_a_n_d [ _a_r_g_s ... ]
              The first form lists the active jobs.  The options have the fol-
              lowing meanings:
              --ll     List process IDs in addition to the normal information.
              --pp     List  only  the  process  ID  of  the job’s process group
                     leader.
              --nn     Display information only about  jobs  that  have  changed
                     status  since the user was last notified of their status.
              --rr     Restrict output to running jobs.
              --ss     Restrict output to stopped jobs.

              If _j_o_b_s_p_e_c is given, output is restricted to  information  about
              that  job.   The  return status is 0 unless an invalid option is
              encountered or an invalid _j_o_b_s_p_e_c is supplied.

              If the --xx option is supplied, jjoobbss replaces any _j_o_b_s_p_e_c found in
              _c_o_m_m_a_n_d  or  _a_r_g_s  with  the corresponding process group ID, and
              executes _c_o_m_m_a_n_d passing it _a_r_g_s, returning its exit status.

       kkiillll [--ss _s_i_g_s_p_e_c | --nn _s_i_g_n_u_m | --_s_i_g_s_p_e_c] [_p_i_d | _j_o_b_s_p_e_c] ...
       kkiillll --ll [_s_i_g_s_p_e_c | _e_x_i_t___s_t_a_t_u_s]
              Send the signal named by _s_i_g_s_p_e_c  or  _s_i_g_n_u_m  to  the  processes
              named  by  _p_i_d or _j_o_b_s_p_e_c.  _s_i_g_s_p_e_c is either a case-insensitive
              signal name such as SSIIGGKKIILLLL (with or without the SSIIGG prefix)  or
              a  signal  number; _s_i_g_n_u_m is a signal number.  If _s_i_g_s_p_e_c is not
              present, then SSIIGGTTEERRMM is assumed.  An argument of --ll  lists  the
              signal  names.   If any arguments are supplied when --ll is given,
              the names of the signals  corresponding  to  the  arguments  are
              listed, and the return status is 0.  The _e_x_i_t___s_t_a_t_u_s argument to
              --ll is a number specifying either a signal  number  or  the  exit
              status  of  a process terminated by a signal.  kkiillll returns true
              if at least one signal was successfully sent,  or  false  if  an
              error occurs or an invalid option is encountered.

       lleett _a_r_g [_a_r_g ...]
              Each _a_r_g is an arithmetic expression to be evaluated (see AARRIITTHH--
              MMEETTIICC EEVVAALLUUAATTIIOONN).  If the last _a_r_g evaluates to 0, lleett  returns
              1; 0 is returned otherwise.

       llooccaall [_o_p_t_i_o_n] [_n_a_m_e[=_v_a_l_u_e] ...]
              For  each  argument, a local variable named _n_a_m_e is created, and
              assigned _v_a_l_u_e.  The _o_p_t_i_o_n can be any of the  options  accepted
              by ddeeccllaarree.  When llooccaall is used within a function, it causes the
              variable _n_a_m_e to have a visible scope restricted to  that  func-
              tion and its children.  With no operands, llooccaall writes a list of
              local variables to the standard output.  It is an error  to  use
              llooccaall when not within a function.  The return status is 0 unless
              llooccaall is used outside a function, an invalid _n_a_m_e  is  supplied,
              or _n_a_m_e is a readonly variable.

       llooggoouutt Exit a login shell.

       ppooppdd [-nn] [+_n] [-_n]
              Removes  entries  from  the directory stack.  With no arguments,
              removes the top directory from the stack, and performs a  ccdd  to
              the new top directory.  Arguments, if supplied, have the follow-
              ing meanings:
              ++_n     Removes the _nth entry counting from the left of the  list
                     shown  by  ddiirrss, starting with zero.  For example: ‘‘popd
                     +0’’ removes the first directory, ‘‘popd +1’’ the second.
              --_n     Removes the _nth entry counting from the right of the list
                     shown by ddiirrss, starting with zero.  For  example:  ‘‘popd
                     -0’’  removes the last directory, ‘‘popd -1’’ the next to
                     last.
              --nn     Suppresses the normal change of directory  when  removing
                     directories  from  the  stack,  so that only the stack is
                     manipulated.

              If the ppooppdd command is successful, a ddiirrss is performed as  well,
              and  the  return  status is 0.  ppooppdd returns false if an invalid
              option is encountered, the directory stack is empty, a non-exis-
              tent directory stack entry is specified, or the directory change
              fails.

       pprriinnttff [--vv _v_a_r] _f_o_r_m_a_t [_a_r_g_u_m_e_n_t_s]
              Write the formatted _a_r_g_u_m_e_n_t_s to the standard output  under  the
              control  of  the _f_o_r_m_a_t.  The _f_o_r_m_a_t is a character string which
              contains three types of objects:  plain  characters,  which  are
              simply  copied  to  standard output, character escape sequences,
              which are converted and copied to the standard output, and  for-
              mat  specifications,  each  of which causes printing of the next
              successive _a_r_g_u_m_e_n_t.  In addition to the standard _p_r_i_n_t_f(1) for-
              mats,  %%bb  causes pprriinnttff to expand backslash escape sequences in
              the corresponding _a_r_g_u_m_e_n_t (except that  \\cc  terminates  output,
              backslashes in \\'', \\"", and \\?? are not removed, and octal escapes
              beginning with \\00 may contain up to four digits), and %%qq  causes
              pprriinnttff to output the corresponding _a_r_g_u_m_e_n_t in a format that can
              be reused as shell input.

              The --vv option causes the output to be assigned to  the  variable
              _v_a_r rather than being printed to the standard output.

              The  _f_o_r_m_a_t  is  reused as necessary to consume all of the _a_r_g_u_-
              _m_e_n_t_s.  If the _f_o_r_m_a_t requires more _a_r_g_u_m_e_n_t_s than are supplied,
              the  extra  format  specifications  behave as if a zero value or
              null string, as appropriate,  had  been  supplied.   The  return
              value is zero on success, non-zero on failure.

       ppuusshhdd [--nn] [_d_i_r]
       ppuusshhdd [--nn] [+_n] [-_n]
              Adds  a  directory to the top of the directory stack, or rotates
              the stack, making the new top of the stack the  current  working
              directory.  With no arguments, exchanges the top two directories
              and returns 0, unless the directory stack is empty.   Arguments,
              if supplied, have the following meanings:
              ++_n     Rotates  the  stack  so  that the _nth directory (counting
                     from the left of the list shown by  ddiirrss,  starting  with
                     zero) is at the top.
              --_n     Rotates  the  stack  so  that the _nth directory (counting
                     from the right of the list shown by ddiirrss,  starting  with
                     zero) is at the top.
              --nn     Suppresses  the  normal  change  of directory when adding
                     directories to the stack,  so  that  only  the  stack  is
                     manipulated.
              _d_i_r    Adds _d_i_r to the directory stack at the top, making it the
                     new current working directory.

              If the ppuusshhdd command is successful, a ddiirrss is performed as well.
              If  the first form is used, ppuusshhdd returns 0 unless the cd to _d_i_r
              fails.  With the second form, ppuusshhdd returns 0 unless the  direc-
              tory  stack  is empty, a non-existent directory stack element is
              specified, or the directory change to the specified new  current
              directory fails.

       ppwwdd [--LLPP]
              Print  the  absolute  pathname of the current working directory.
              The pathname printed contains no symbolic links if the --PP option
              is supplied or the --oo pphhyyssiiccaall option to the sseett builtin command
              is enabled.  If the --LL option is used, the pathname printed  may
              contain  symbolic links.  The return status is 0 unless an error
              occurs while reading the name of the  current  directory  or  an
              invalid option is supplied.

       rreeaadd [--eerrss] [--uu _f_d] [--tt _t_i_m_e_o_u_t] [--aa _a_n_a_m_e] [--pp _p_r_o_m_p_t] [--nn _n_c_h_a_r_s] [--dd
       _d_e_l_i_m] [_n_a_m_e ...]
              One  line  is  read  from  the  standard input, or from the file
              descriptor _f_d supplied as an argument to the --uu option, and  the
              first word is assigned to the first _n_a_m_e, the second word to the
              second _n_a_m_e, and so on, with leftover words and their  interven-
              ing  separators  assigned  to the last _n_a_m_e.  If there are fewer
              words read from the input stream than names, the remaining names
              are  assigned  empty  values.  The characters in IIFFSS are used to
              split the line into words.  The backslash character (\\)  may  be
              used  to  remove any special meaning for the next character read
              and for line continuation.  Options, if supplied, have the  fol-
              lowing meanings:
              --aa _a_n_a_m_e
                     The words are assigned to sequential indices of the array
                     variable _a_n_a_m_e, starting at 0.  _a_n_a_m_e is unset before any
                     new  values  are  assigned.   Other  _n_a_m_e  arguments  are
                     ignored.
              --dd _d_e_l_i_m
                     The first character of _d_e_l_i_m is  used  to  terminate  the
                     input line, rather than newline.
              --ee     If the standard input is coming from a terminal, rreeaaddlliinnee
                     (see RREEAADDLLIINNEE above) is used to obtain the line.
              --nn _n_c_h_a_r_s
                     rreeaadd returns after reading _n_c_h_a_r_s characters rather  than
                     waiting for a complete line of input.
              --pp _p_r_o_m_p_t
                     Display _p_r_o_m_p_t on standard error, without a trailing new-
                     line, before attempting to read any input.  The prompt is
                     displayed only if input is coming from a terminal.
              --rr     Backslash does not act as an escape character.  The back-
                     slash is considered to be part of the line.  In  particu-
                     lar,  a  backslash-newline pair may not be used as a line
                     continuation.
              --ss     Silent mode.  If input is coming from a terminal, charac-
                     ters are not echoed.
              --tt _t_i_m_e_o_u_t
                     Cause  rreeaadd  to time out and return failure if a complete
                     line of input is not read within _t_i_m_e_o_u_t  seconds.   This
                     option  has  no  effect if rreeaadd is not reading input from
                     the terminal or a pipe.
              --uu _f_d  Read input from file descriptor _f_d.

              If no _n_a_m_e_s are supplied, the line read is assigned to the vari-
              able  RREEPPLLYY.   The  return  code  is zero, unless end-of-file is
              encountered, rreeaadd times out, or an invalid  file  descriptor  is
              supplied as the argument to --uu.

       rreeaaddoonnllyy [--aappff] [_n_a_m_e[=_w_o_r_d] ...]
              The  given  _n_a_m_e_s are marked readonly; the values of these _n_a_m_e_s
              may not be changed by subsequent assignment.  If the  --ff  option
              is  supplied,  the  functions  corresponding to the _n_a_m_e_s are so
              marked.  The --aa option restricts the variables to arrays.  If no
              _n_a_m_e  arguments  are  given,  or if the --pp option is supplied, a
              list of all readonly names is printed.   The  --pp  option  causes
              output  to be displayed in a format that may be reused as input.
              If a variable name is followed by =_w_o_r_d, the value of the  vari-
              able  is  set to _w_o_r_d.  The return status is 0 unless an invalid
              option is encountered, one of the _n_a_m_e_s is  not  a  valid  shell
              variable name, or --ff is supplied with a _n_a_m_e that is not a func-
              tion.

       rreettuurrnn [_n]
              Causes a function to exit with the return value specified by  _n.
              If  _n  is omitted, the return status is that of the last command
              executed in the function body.  If used outside a function,  but
              during  execution  of  a  script  by the ..  (ssoouurrccee) command, it
              causes the shell to stop executing that script and return either
              _n  or  the  exit  status of the last command executed within the
              script as the exit status of the  script.   If  used  outside  a
              function  and  not during execution of a script by .., the return
              status is false.  Any command associated with the RREETTUURRNN trap is
              executed  before execution resumes after the function or script.

       sseett [----aabbeeffhhkkmmnnppttuuvvxxBBCCHHPP] [--oo _o_p_t_i_o_n] [_a_r_g ...]
              Without options, the name and value of each shell  variable  are
              displayed in a format that can be reused as input for setting or
              resetting the currently-set variables.  Read-only variables can-
              not  be  reset.  In _p_o_s_i_x _m_o_d_e, only shell variables are listed.
              The output is sorted according  to  the  current  locale.   When
              options  are specified, they set or unset shell attributes.  Any
              arguments remaining after the options are processed are  treated
              as  values  for  the  positional parameters and are assigned, in
              order, to $$11, $$22, ......  $$_n.  Options, if specified, have the fol-
              lowing meanings:
              --aa      Automatically  mark  variables  and  functions which are
                      modified or created for export  to  the  environment  of
                      subsequent commands.
              --bb      Report  the status of terminated background jobs immedi-
                      ately, rather than before the next primary prompt.  This
                      is effective only when job control is enabled.
              --ee      Exit  immediately if a _s_i_m_p_l_e _c_o_m_m_a_n_d (see SSHHEELLLL GGRRAAMMMMAARR
                      above) exits with a non-zero status.  The shell does not
                      exit  if  the  command that fails is part of the command
                      list immediately following a  wwhhiillee  or  uunnttiill  keyword,
                      part  of the test in an _i_f statement, part of a &&&& or ││││
                      list, or if the command’s return value is being inverted
                      via  !!.   A  trap on EERRRR, if set, is executed before the
                      shell exits.
              --ff      Disable pathname expansion.
              --hh      Remember the location of commands as they are looked  up
                      for execution.  This is enabled by default.
              --kk      All  arguments  in the form of assignment statements are
                      placed in the environment for a command, not just  those
                      that precede the command name.
              --mm      Monitor  mode.   Job control is enabled.  This option is
                      on by default for interactive  shells  on  systems  that
                      support  it  (see  JJOOBB  CCOONNTTRROOLL above).  Background pro-
                      cesses run in a separate process group and a  line  con-
                      taining  their exit status is printed upon their comple-
                      tion.
              --nn      Read commands but do not execute them.  This may be used
                      to  check  a  shell  script  for syntax errors.  This is
                      ignored by interactive shells.
              --oo _o_p_t_i_o_n_-_n_a_m_e
                      The _o_p_t_i_o_n_-_n_a_m_e can be one of the following:
                      aalllleexxppoorrtt
                              Same as --aa.
                      bbrraacceeeexxppaanndd
                              Same as --BB.
                      eemmaaccss   Use an emacs-style command line  editing  inter-
                              face.  This is enabled by default when the shell
                              is interactive, unless the shell is started with
                              the ----nnooeeddiittiinngg option.
                      eerrrrttrraaccee
                              Same as --EE.
                      ffuunnccttrraaccee
                              Same as --TT.
                      eerrrreexxiitt Same as --ee.
                      hhaasshhaallll Same as --hh.
                      hhiisstteexxppaanndd
                              Same as --HH.
                      hhiissttoorryy Enable command history, as described above under
                              HHIISSTTOORRYY.  This option is on by default in inter-
                              active shells.
                      iiggnnoorreeeeooff
                              The   effect   is   as   if  the  shell  command
                              ‘‘IGNOREEOF=10’’ had been  executed  (see  SShheellll
                              VVaarriiaabblleess above).
                      kkeeyywwoorrdd Same as --kk.
                      mmoonniittoorr Same as --mm.
                      nnoocclloobbbbeerr
                              Same as --CC.
                      nnooeexxeecc  Same as --nn.
                      nnoogglloobb  Same as --ff.  nnoolloogg Currently ignored.
                      nnoottiiffyy  Same as --bb.
                      nnoouunnsseett Same as --uu.
                      oonneeccmmdd  Same as --tt.
                      pphhyyssiiccaall
                              Same as --PP.
                      ppiippeeffaaiill
                              If  set,  the  return value of a pipeline is the
                              value of the last (rightmost)  command  to  exit
                              with  a non-zero status, or zero if all commands
                              in the pipeline exit successfully.  This  option
                              is disabled by default.
                      ppoossiixx   Change  the  behavior  of bbaasshh where the default
                              operation differs from  the  POSIX  standard  to
                              match the standard (_p_o_s_i_x _m_o_d_e).
                      pprriivviilleeggeedd
                              Same as --pp.
                      vveerrbboossee Same as --vv.
                      vvii      Use a vi-style command line editing interface.
                      xxttrraaccee  Same as --xx.
                      If --oo is supplied with no _o_p_t_i_o_n_-_n_a_m_e, the values of the
                      current options are printed.  If ++oo is supplied with  no
                      _o_p_t_i_o_n_-_n_a_m_e,  a  series  of sseett commands to recreate the
                      current option settings is  displayed  on  the  standard
                      output.
              --pp      Turn  on  _p_r_i_v_i_l_e_g_e_d  mode.   In this mode, the $$EENNVV and
                      $$BBAASSHH__EENNVV files are not processed, shell  functions  are
                      not  inherited  from  the environment, and the SSHHEELLLLOOPPTTSS
                      variable, if it appears in the environment, is  ignored.
                      If  the shell is started with the effective user (group)
                      id not equal to the real user (group)  id,  and  the  --pp
                      option  is not supplied, these actions are taken and the
                      effective user id is set to the real user id.  If the --pp
                      option  is supplied at startup, the effective user id is
                      not reset.  Turning this option off causes the effective
                      user  and group ids to be set to the real user and group
                      ids.
              --tt      Exit after reading and executing one command.
              --uu      Treat unset variables as an error when performing param-
                      eter  expansion.   If expansion is attempted on an unset
                      variable, the shell prints an error message, and, if not
                      interactive, exits with a non-zero status.
              --vv      Print shell input lines as they are read.
              --xx      After  expanding  each _s_i_m_p_l_e _c_o_m_m_a_n_d, ffoorr command, ccaassee
                      command, sseelleecctt command, or arithmetic ffoorr command, dis-
                      play  the expanded value of PPSS44, followed by the command
                      and its expanded arguments or associated word list.
              --BB      The shell performs brace expansion (see BBrraaccee  EExxppaannssiioonn
                      above).  This is on by default.
              --CC      If  set,  bbaasshh  does not overwrite an existing file with
                      the >>, >>&&, and <<>> redirection operators.   This  may  be
                      overridden when creating output files by using the redi-
                      rection operator >>|| instead of >>.
              --EE      If set, any trap on EERRRR is inherited by shell functions,
                      command   substitutions,  and  commands  executed  in  a
                      subshell environment.  The  EERRRR  trap  is  normally  not
                      inherited in such cases.
              --HH      Enable !!  style history substitution.  This option is on
                      by default when the shell is interactive.
              --PP      If set, the shell does not follow  symbolic  links  when
                      executing  commands  such  as ccdd that change the current
                      working  directory.   It  uses  the  physical  directory
                      structure instead.  By default, bbaasshh follows the logical
                      chain of  directories  when  performing  commands  which
                      change the current directory.
              --TT      If  set,  any traps on DDEEBBUUGG and RREETTUURRNN are inherited by
                      shell functions,  command  substitutions,  and  commands
                      executed  in  a  subshell  environment.   The  DDEEBBUUGG and
                      RREETTUURRNN traps are normally not inherited in such cases.
              ----      If no arguments follow this option, then the  positional
                      parameters are unset.  Otherwise, the positional parame-
                      ters are set to the _a_r_gs, even if  some  of  them  begin
                      with a --.
              --       Signal  the  end of options, cause all remaining _a_r_gs to
                      be assigned to the positional parameters.  The --xx and --vv
                      options are turned off.  If there are no _a_r_gs, the posi-
                      tional parameters remain unchanged.

              The options are off by default unless otherwise noted.  Using  +
              rather  than  -  causes  these  options  to  be turned off.  The
              options can also be specified as arguments to an  invocation  of
              the  shell.  The current set of options may be found in $$--.  The
              return status is always true unless an invalid option is encoun-
              tered.

       sshhiifftt [_n]
              The  positional  parameters  from _n+1 ... are renamed to $$11 ........
              Parameters represented by the numbers  $$##  down  to  $$##-_n+1  are
              unset.   _n  must  be a non-negative number less than or equal to
              $$##.  If _n is 0, no parameters are changed.  If _n is  not  given,
              it  is assumed to be 1.  If _n is greater than $$##, the positional
              parameters are not changed.  The return status is  greater  than
              zero if _n is greater than $$## or less than zero; otherwise 0.

       sshhoopptt [--ppqqssuu] [--oo] [_o_p_t_n_a_m_e ...]
              Toggle the values of variables controlling optional shell behav-
              ior.  With no options, or with the --pp option, a list of all set-
              table options is displayed, with an indication of whether or not
              each is set.  The --pp option causes output to be displayed  in  a
              form  that  may be reused as input.  Other options have the fol-
              lowing meanings:
              --ss     Enable (set) each _o_p_t_n_a_m_e.
              --uu     Disable (unset) each _o_p_t_n_a_m_e.
              --qq     Suppresses normal output (quiet mode); the return  status
                     indicates whether the _o_p_t_n_a_m_e is set or unset.  If multi-
                     ple _o_p_t_n_a_m_e arguments are given with --qq, the return  sta-
                     tus  is zero if all _o_p_t_n_a_m_e_s are enabled; non-zero other-
                     wise.
              --oo     Restricts the values of _o_p_t_n_a_m_e to be those  defined  for
                     the --oo option to the sseett builtin.

              If  either  --ss or --uu is used with no _o_p_t_n_a_m_e arguments, the dis-
              play is limited to those options which are set or unset, respec-
              tively.   Unless otherwise noted, the sshhoopptt options are disabled
              (unset) by default.

              The return status when listing options is zero if  all  _o_p_t_n_a_m_e_s
              are  enabled,  non-zero  otherwise.   When  setting or unsetting
              options, the return status is zero unless an _o_p_t_n_a_m_e  is  not  a
              valid shell option.

              The list of sshhoopptt options is:

              ccddaabbllee__vvaarrss
                      If  set,  an  argument to the ccdd builtin command that is
                      not a directory is assumed to be the name of a  variable
                      whose value is the directory to change to.
              ccddssppeellll If set, minor errors in the spelling of a directory com-
                      ponent in a ccdd command will be  corrected.   The  errors
                      checked for are transposed characters, a missing charac-
                      ter, and one character too many.   If  a  correction  is
                      found,  the corrected file name is printed, and the com-
                      mand proceeds.  This option is only used by  interactive
                      shells.
              cchheecckkhhaasshh
                      If set, bbaasshh checks that a command found in the hash ta-
                      ble exists before trying to execute  it.   If  a  hashed
                      command  no  longer exists, a normal path search is per-
                      formed.
              cchheecckkwwiinnssiizzee
                      If set, bbaasshh checks the window size after  each  command
                      and,  if  necessary,  updates  the  values  of LLIINNEESS and
                      CCOOLLUUMMNNSS.
              ccmmddhhiisstt If set, bbaasshh attempts to save all lines of  a  multiple-
                      line  command  in  the  same history entry.  This allows
                      easy re-editing of multi-line commands.
              ddoottgglloobb If set, bbaasshh includes filenames beginning with a ‘.’  in
                      the results of pathname expansion.
              eexxeeccffaaiill
                      If set, a non-interactive shell will not exit if it can-
                      not execute the file specified as  an  argument  to  the
                      eexxeecc  builtin  command.   An  interactive shell does not
                      exit if eexxeecc fails.
              eexxppaanndd__aalliiaasseess
                      If set, aliases are expanded as  described  above  under
                      AALLIIAASSEESS.  This option is enabled by default for interac-
                      tive shells.
              eexxttddeebbuugg
                      If set,  behavior  intended  for  use  by  debuggers  is
                      enabled:
                      11..     The --FF option to the ddeeccllaarree builtin displays the
                             source file name and line number corresponding to
                             each function name supplied as an argument.
                      22..     If  the  command  run by the DDEEBBUUGG trap returns a
                             non-zero value, the next command is  skipped  and
                             not executed.
                      33..     If  the  command  run by the DDEEBBUUGG trap returns a
                             value of 2, and the shell is executing in a  sub-
                             routine  (a shell function or a shell script exe-
                             cuted by the .. or ssoouurrccee  builtins),  a  call  to
                             rreettuurrnn is simulated.
                      44..     BBAASSHH__AARRGGCC  and BBAASSHH__AARRGGVV are updated as described
                             in their descriptions above.
                      55..     Function tracing is enabled:   command  substitu-
                             tion, shell functions, and subshells invoked with
                             (( _c_o_m_m_a_n_d )) inherit the DDEEBBUUGG and RREETTUURRNN traps.
                      66..     Error tracing is enabled:  command  substitution,
                             shell  functions,  and  subshells  invoked with ((
                             _c_o_m_m_a_n_d )) inherit the EERRRROORR trap.
              eexxttgglloobb If set, the extended pattern matching features described
                      above under PPaatthhnnaammee EExxppaannssiioonn are enabled.
              eexxttqquuoottee
                      If  set,  $$'_s_t_r_i_n_g'  and  $$"_s_t_r_i_n_g" quoting is performed
                      within  $${{_p_a_r_a_m_e_t_e_r}}  expansions  enclosed   in   double
                      quotes.  This option is enabled by default.
              ffaaiillgglloobb
                      If  set,  patterns  which fail to match filenames during
                      pathname expansion result in an expansion error.
              ffoorrccee__ffiiggnnoorree
                      If set, the suffixes  specified  by  the  FFIIGGNNOORREE  shell
                      variable  cause words to be ignored when performing word
                      completion even if the ignored words are the only possi-
                      ble  completions.   See  SSHHEELLLL  VVAARRIIAABBLLEESS  above  for  a
                      description of  FFIIGGNNOORREE.   This  option  is  enabled  by
                      default.
              ggnnuu__eerrrrffmmtt
                      If set, shell error messages are written in the standard
                      GNU error message format.
              hhiissttaappppeenndd
                      If set, the history list is appended to the  file  named
                      by  the  value  of  the HHIISSTTFFIILLEE variable when the shell
                      exits, rather than overwriting the file.
              hhiissttrreeeeddiitt
                      If set, and rreeaaddlliinnee is being used, a user is given  the
                      opportunity to re-edit a failed history substitution.
              hhiissttvveerriiffyy
                      If  set, and rreeaaddlliinnee is being used, the results of his-
                      tory substitution are  not  immediately  passed  to  the
                      shell  parser.   Instead,  the  resulting line is loaded
                      into the rreeaaddlliinnee editing buffer, allowing further modi-
                      fication.
              hhoossttccoommpplleettee
                      If set, and rreeaaddlliinnee is being used, bbaasshh will attempt to
                      perform hostname completion when a word containing  a  @@
                      is   being  completed  (see  CCoommpplleettiinngg  under  RREEAADDLLIINNEE
                      above).  This is enabled by default.
              hhuuppoonneexxiitt
                      If set, bbaasshh will send SSIIGGHHUUPP to all jobs when an inter-
                      active login shell exits.
              iinntteerraaccttiivvee__ccoommmmeennttss
                      If set, allow a word beginning with ## to cause that word
                      and all remaining characters on that line to be  ignored
                      in  an  interactive  shell  (see  CCOOMMMMEENNTTSS above).  This
                      option is enabled by default.
              lliitthhiisstt If set, and the ccmmddhhiisstt option  is  enabled,  multi-line
                      commands are saved to the history with embedded newlines
                      rather than using semicolon separators where possible.
              llooggiinn__sshheellll
                      The shell sets this option if it is started as  a  login
                      shell  (see  IINNVVOOCCAATTIIOONN  above).   The  value may not be
                      changed.
              mmaaiillwwaarrnn
                      If set, and a file that bbaasshh is checking  for  mail  has
                      been  accessed  since  the last time it was checked, the
                      message ‘‘The mail in _m_a_i_l_f_i_l_e has been read’’  is  dis-
                      played.
              nnoo__eemmppttyy__ccmmdd__ccoommpplleettiioonn
                      If  set,  and  rreeaaddlliinnee  is  being  used,  bbaasshh will not
                      attempt to search the PPAATTHH for possible completions when
                      completion is attempted on an empty line.
              nnooccaasseegglloobb
                      If  set,  bbaasshh  matches  filenames in a case-insensitive
                      fashion when performing pathname expansion (see PPaatthhnnaammee
                      EExxppaannssiioonn above).
              nnooccaasseemmaattcchh
                      If  set,  bbaasshh  matches  patterns  in a case-insensitive
                      fashion when performing matching while executing ccaassee or
                      [[[[ conditional commands.
              nnuullllgglloobb
                      If  set,  bbaasshh allows patterns which match no files (see
                      PPaatthhnnaammee EExxppaannssiioonn above) to expand to  a  null  string,
                      rather than themselves.
              pprrooggccoommpp
                      If set, the programmable completion facilities (see PPrroo--
                      ggrraammmmaabbllee CCoommpplleettiioonn above) are enabled.  This option is
                      enabled by default.
              pprroommppttvvaarrss
                      If set, prompt strings undergo parameter expansion, com-
                      mand  substitution,  arithmetic  expansion,  and   quote
                      removal  after  being expanded as described in PPRROOMMPPTTIINNGG
                      above.  This option is enabled by default.
              rreessttrriicctteedd__sshheellll
                      The  shell  sets  this  option  if  it  is  started   in
                      restricted mode (see RREESSTTRRIICCTTEEDD SSHHEELLLL below).  The value
                      may not be changed.  This is not reset when the  startup
                      files  are  executed, allowing the startup files to dis-
                      cover whether or not a shell is restricted.
              sshhiifftt__vveerrbboossee
                      If set, the sshhiifftt builtin prints an error  message  when
                      the shift count exceeds the number of positional parame-
                      ters.
              ssoouurrcceeppaatthh
                      If set, the ssoouurrccee (..) builtin uses the value of PPAATTHH to
                      find  the  directory  containing the file supplied as an
                      argument.  This option is enabled by default.
              xxppgg__eecchhoo
                      If  set,  the  eecchhoo  builtin  expands   backslash-escape
                      sequences by default.
       ssuussppeenndd [--ff]
              Suspend  the execution of this shell until it receives a SSIIGGCCOONNTT
              signal.  The --ff option says not to complain if this is  a  login
              shell;  just  suspend anyway.  The return status is 0 unless the
              shell is a login shell and --ff is not supplied, or if job control
              is not enabled.
       tteesstt _e_x_p_r
       [[ _e_x_p_r ]]
              Return  a  status  of  0 or 1 depending on the evaluation of the
              conditional expression _e_x_p_r.  Each operator and operand must  be
              a  separate argument.  Expressions are composed of the primaries
              described above under CCOONNDDIITTIIOONNAALL EEXXPPRREESSSSIIOONNSS.   tteesstt  does  not
              accept any options, nor does it accept and ignore an argument of
              ---- as signifying the end of options.

              Expressions may  be  combined  using  the  following  operators,
              listed in decreasing order of precedence.
              !! _e_x_p_r True if _e_x_p_r is false.
              (( _e_x_p_r ))
                     Returns  the value of _e_x_p_r.  This may be used to override
                     the normal precedence of operators.
              _e_x_p_r_1 -aa _e_x_p_r_2
                     True if both _e_x_p_r_1 and _e_x_p_r_2 are true.
              _e_x_p_r_1 -oo _e_x_p_r_2
                     True if either _e_x_p_r_1 or _e_x_p_r_2 is true.

              tteesstt and [[ evaluate conditional expressions using a set of rules
              based on the number of arguments.

              0 arguments
                     The expression is false.
              1 argument
                     The expression is true if and only if the argument is not
                     null.
              2 arguments
                     If the first argument is !!, the expression is true if and
                     only  if the second argument is null.  If the first argu-
                     ment is one of the  unary  conditional  operators  listed
                     above  under  CCOONNDDIITTIIOONNAALL  EEXXPPRREESSSSIIOONNSS, the expression is
                     true if the unary test is true.  If the first argument is
                     not a valid unary conditional operator, the expression is
                     false.
              3 arguments
                     If the second argument is one of the  binary  conditional
                     operators listed above under CCOONNDDIITTIIOONNAALL EEXXPPRREESSSSIIOONNSS, the
                     result of the expression is the result of the binary test
                     using  the first and third arguments as operands.  If the
                     first argument is !!, the value is  the  negation  of  the
                     two-argument  test  using the second and third arguments.
                     If the first argument is exactly (( and the third argument
                     is  exactly )), the result is the one-argument test of the
                     second argument.  Otherwise,  the  expression  is  false.
                     The  --aa  and --oo operators are considered binary operators
                     in this case.
              4 arguments
                     If the first argument is !!, the result is the negation of
                     the  three-argument  expression composed of the remaining
                     arguments.  Otherwise, the expression is parsed and eval-
                     uated  according  to  precedence  using  the rules listed
                     above.
              5 or more arguments
                     The expression  is  parsed  and  evaluated  according  to
                     precedence using the rules listed above.

       ttiimmeess  Print  the  accumulated  user and system times for the shell and
              for processes run from the shell.  The return status is 0.

       ttrraapp [--llpp] [[_a_r_g] _s_i_g_s_p_e_c ...]
              The command _a_r_g is to  be  read  and  executed  when  the  shell
              receives  signal(s)  _s_i_g_s_p_e_c.   If _a_r_g is absent (and there is a
              single _s_i_g_s_p_e_c) or --, each specified  signal  is  reset  to  its
              original  disposition  (the  value  it  had upon entrance to the
              shell).  If _a_r_g is the null string the signal specified by  each
              _s_i_g_s_p_e_c  is ignored by the shell and by the commands it invokes.
              If _a_r_g is not present and --pp has been supplied,  then  the  trap
              commands  associated  with  each  _s_i_g_s_p_e_c  are displayed.  If no
              arguments are supplied or if only --pp is given, ttrraapp  prints  the
              list  of  commands  associated  with each signal.  The --ll option
              causes the shell to print a list of signal names and their  cor-
              responding  numbers.   Each  _s_i_g_s_p_e_c  is  either  a  signal name
              defined in <_s_i_g_n_a_l_._h>, or a signal  number.   Signal  names  are
              case  insensitive  and the SIG prefix is optional.  If a _s_i_g_s_p_e_c
              is EEXXIITT (0) the command _a_r_g is executed on exit from the  shell.
              If  a _s_i_g_s_p_e_c is DDEEBBUUGG, the command _a_r_g is executed before every
              _s_i_m_p_l_e _c_o_m_m_a_n_d, _f_o_r command, _c_a_s_e command, _s_e_l_e_c_t command, every
              arithmetic _f_o_r command, and before the first command executes in
              a shell function  (see  SSHHEELLLL  GGRRAAMMMMAARR  above).   Refer  to  the
              description  of  the  eexxttddeebbuugg  option  to the sshhoopptt builtin for
              details of its effect on the DDEEBBUUGG trap.  If a _s_i_g_s_p_e_c  is  EERRRR,
              the  command  _a_r_g  is  executed  whenever a simple command has a
              non-zero exit status, subject to the following conditions.   The
              EERRRR  trap  is  not executed if the failed command is part of the
              command list immediately following a  wwhhiillee  or  uunnttiill  keyword,
              part of the test in an _i_f statement, part of a &&&& or ││││ list, or
              if the command’s return value is being inverted  via  !!.   These
              are  the  same  conditions  obeyed  by the eerrrreexxiitt option.  If a
              _s_i_g_s_p_e_c is RREETTUURRNN, the command _a_r_g is executed each time a shell
              function or a script executed with the .. or ssoouurrccee builtins fin-
              ishes executing.  Signals ignored upon entry to the shell cannot
              be trapped or reset.  Trapped signals that are not being ignored
              are reset to their original values in a child process when it is
              created.   The return status is false if any _s_i_g_s_p_e_c is invalid;
              otherwise ttrraapp returns true.

       ttyyppee [--aaffttppPP] _n_a_m_e [_n_a_m_e ...]
              With no options, indicate how each _n_a_m_e would be interpreted  if
              used as a command name.  If the --tt option is used, ttyyppee prints a
              string which is one of _a_l_i_a_s,  _k_e_y_w_o_r_d,  _f_u_n_c_t_i_o_n,  _b_u_i_l_t_i_n,  or
              _f_i_l_e  if  _n_a_m_e  is  an  alias,  shell  reserved  word, function,
              builtin, or disk file, respectively.  If the _n_a_m_e is not  found,
              then  nothing  is  printed,  and  an  exit  status  of  false is
              returned.  If the --pp option is used,  ttyyppee  either  returns  the
              name of the disk file that would be executed if _n_a_m_e were speci-
              fied as a command name, or nothing if ‘‘type -t name’’ would not
              return  _f_i_l_e.  The --PP option forces a PPAATTHH search for each _n_a_m_e,
              even if ‘‘type -t name’’ would not return _f_i_l_e.  If a command is
              hashed,  --pp  and  --PP print the hashed value, not necessarily the
              file that appears first in PPAATTHH.  If the --aa option is used, ttyyppee
              prints  all of the places that contain an executable named _n_a_m_e.
              This includes aliases and functions,  if  and  only  if  the  --pp
              option  is  not  also used.  The table of hashed commands is not
              consulted when using --aa.  The --ff option suppresses  shell  func-
              tion  lookup, as with the ccoommmmaanndd builtin.  ttyyppee returns true if
              any of the arguments are found, false if none are found.

       uulliimmiitt [--SSHHaaccddeeffiillmmnnppqqrrssttuuvvxx [_l_i_m_i_t]]
              Provides control over the resources available to the  shell  and
              to  processes started by it, on systems that allow such control.
              The --HH and --SS options specify that the hard or soft limit is set
              for  the  given resource.  A hard limit cannot be increased once
              it is set; a soft limit may be increased up to the value of  the
              hard  limit.   If  neither --HH nor --SS is specified, both the soft
              and hard limits are set.  The value of _l_i_m_i_t can be a number  in
              the unit specified for the resource or one of the special values
              hhaarrdd, ssoofftt, or uunnlliimmiitteedd,  which  stand  for  the  current  hard
              limit,  the  current soft limit, and no limit, respectively.  If
              _l_i_m_i_t is omitted, the current value of the  soft  limit  of  the
              resource  is  printed, unless the --HH option is given.  When more
              than one resource is specified, the  limit  name  and  unit  are
              printed before the value.  Other options are interpreted as fol-
              lows:
              --aa     All current limits are reported
              --cc     The maximum size of core files created
              --dd     The maximum size of a process’s data segment
              --ee     The maximum scheduling priority ("nice")
              --ff     The maximum size of files written by the  shell  and  its
                     children
              --ii     The maximum number of pending signals
              --ll     The maximum size that may be locked into memory
              --mm     The maximum resident set size (has no effect on Linux)
              --nn     The maximum number of open file descriptors (most systems
                     do not allow this value to be set)
              --pp     The pipe size in 512-byte blocks (this may not be set)
              --qq     The maximum number of bytes in POSIX message queues
              --rr     The maximum real-time scheduling priority
              --ss     The maximum stack size
              --tt     The maximum amount of cpu time in seconds
              --uu     The maximum number of processes  available  to  a  single
                     user
              --vv     The  maximum  amount  of  virtual memory available to the
                     shell
              --xx     The maximum number of file locks

              If _l_i_m_i_t is given, it is the new value of the specified resource
              (the --aa option is display only).  If no option is given, then --ff
              is assumed.  Values are in 1024-byte increments, except for  --tt,
              which  is  in seconds, --pp, which is in units of 512-byte blocks,
              and --nn and --uu, which are unscaled values.  The return status  is
              0  unless an invalid option or argument is supplied, or an error
              occurs while setting a new limit.

       uummaasskk [--pp] [--SS] [_m_o_d_e]
              The user file-creation mask is set to _m_o_d_e.  If _m_o_d_e begins with
              a  digit,  it is interpreted as an octal number; otherwise it is
              interpreted as a symbolic mode mask similar to that accepted  by
              _c_h_m_o_d(1).   If _m_o_d_e is omitted, the current value of the mask is
              printed.  The --SS option causes the mask to be  printed  in  sym-
              bolic  form;  the  default output is an octal number.  If the --pp
              option is supplied, and _m_o_d_e is omitted, the output is in a form
              that may be reused as input.  The return status is 0 if the mode
              was successfully changed or if no _m_o_d_e  argument  was  supplied,
              and false otherwise.

       uunnaalliiaass [-aa] [_n_a_m_e ...]
              Remove  each  _n_a_m_e  from  the list of defined aliases.  If --aa is
              supplied, all alias definitions are removed.  The  return  value
              is true unless a supplied _n_a_m_e is not a defined alias.

       uunnsseett [-ffvv] [_n_a_m_e ...]
              For  each  _n_a_m_e,  remove the corresponding variable or function.
              If no options are supplied, or the --vv option is given, each _n_a_m_e
              refers  to  a  shell  variable.   Read-only variables may not be
              unset.  If --ff is specified, each _n_a_m_e refers to  a  shell  func-
              tion,  and the function definition is removed.  Each unset vari-
              able or function is removed from the environment passed to  sub-
              sequent  commands.   If any of RRAANNDDOOMM, SSEECCOONNDDSS, LLIINNEENNOO, HHIISSTTCCMMDD,
              FFUUNNCCNNAAMMEE, GGRROOUUPPSS, or DDIIRRSSTTAACCKK are unset, they lose their special
              properties,  even if they are subsequently reset.  The exit sta-
              tus is true unless a _n_a_m_e is readonly.

       wwaaiitt [_n _._._.]
              Wait for each specified process and return its termination  sta-
              tus.   Each  _n  may be a process ID or a job specification; if a
              job spec is given, all processes  in  that  job’s  pipeline  are
              waited  for.  If _n is not given, all currently active child pro-
              cesses are waited for, and the return  status  is  zero.   If  _n
              specifies  a  non-existent  process or job, the return status is
              127.  Otherwise, the return status is the  exit  status  of  the
              last process or job waited for.

RREESSTTRRIICCTTEEDD SSHHEELLLL
       If bbaasshh is started with the name rrbbaasshh, or the --rr option is supplied at
       invocation, the shell becomes restricted.  A restricted shell  is  used
       to  set  up an environment more controlled than the standard shell.  It
       behaves identically to bbaasshh with the exception that the  following  are
       disallowed or not performed:

       ·      changing directories with ccdd

       ·      setting or unsetting the values of SSHHEELLLL, PPAATTHH, EENNVV, or BBAASSHH__EENNVV

       ·      specifying command names containing //

       ·      specifying a file name containing a // as an argument  to  the  ..
              builtin command

       ·      Specifying  a  filename containing a slash as an argument to the
              --pp option to the hhaasshh builtin command

       ·      importing function definitions from  the  shell  environment  at
              startup

       ·      parsing  the  value  of  SSHHEELLLLOOPPTTSS from the shell environment at
              startup

       ·      redirecting output using the >, >|, <>, >&, &>, and >>  redirec-
              tion operators

       ·      using the eexxeecc builtin command to replace the shell with another
              command

       ·      adding or deleting builtin commands with the --ff and  --dd  options
              to the eennaabbllee builtin command

       ·      Using  the  eennaabbllee  builtin  command  to  enable  disabled shell
              builtins

       ·      specifying the --pp option to the ccoommmmaanndd builtin command

       ·      turning off restricted mode with sseett ++rr or sseett ++oo rreessttrriicctteedd.

       These restrictions are enforced after any startup files are read.

       When a command that is found to be a shell script is executed (see CCOOMM--
       MMAANNDD  EEXXEECCUUTTIIOONN  above),  rrbbaasshh turns off any restrictions in the shell
       spawned to execute the script.

SSEEEE AALLSSOO
       _B_a_s_h _R_e_f_e_r_e_n_c_e _M_a_n_u_a_l, Brian Fox and Chet Ramey
       _T_h_e _G_n_u _R_e_a_d_l_i_n_e _L_i_b_r_a_r_y, Brian Fox and Chet Ramey
       _T_h_e _G_n_u _H_i_s_t_o_r_y _L_i_b_r_a_r_y, Brian Fox and Chet Ramey
       _P_o_r_t_a_b_l_e _O_p_e_r_a_t_i_n_g _S_y_s_t_e_m _I_n_t_e_r_f_a_c_e _(_P_O_S_I_X_) _P_a_r_t _2_:  _S_h_e_l_l  _a_n_d  _U_t_i_l_i_-
       _t_i_e_s, IEEE
       _s_h(1), _k_s_h(1), _c_s_h(1)
       _e_m_a_c_s(1), _v_i(1)
       _r_e_a_d_l_i_n_e(3)

FFIILLEESS
       _/_b_i_n_/_b_a_s_h
              The bbaasshh executable
       _/_e_t_c_/_p_r_o_f_i_l_e
              The systemwide initialization file, executed for login shells
       _~_/_._b_a_s_h___p_r_o_f_i_l_e
              The personal initialization file, executed for login shells
       _~_/_._b_a_s_h_r_c
              The individual per-interactive-shell startup file
       _~_/_._b_a_s_h___l_o_g_o_u_t
              The individual login shell cleanup file, executed when  a  login
              shell exits
       _~_/_._i_n_p_u_t_r_c
              Individual _r_e_a_d_l_i_n_e initialization file

AAUUTTHHOORRSS
       Brian Fox, Free Software Foundation
       bfox@gnu.org

       Chet Ramey, Case Western Reserve University
       chet@po.cwru.edu

BBUUGG RREEPPOORRTTSS
       If you find a bug in bbaasshh,, you should report it.  But first, you should
       make sure that it really is a bug, and that it appears  in  the  latest
       version   of  bbaasshh.   The  latest  version  is  always  available  from
       _f_t_p_:_/_/_f_t_p_._g_n_u_._o_r_g_/_p_u_b_/_b_a_s_h_/.

       Once you have determined that a bug actually exists,  use  the  _b_a_s_h_b_u_g
       command  to submit a bug report.  If you have a fix, you are encouraged
       to mail that as well!  Suggestions and ‘philosophical’ bug reports  may
       be  mailed  to  _b_u_g_-_b_a_s_h_@_g_n_u_._o_r_g  or  posted  to  the  Usenet newsgroup
       ggnnuu..bbaasshh..bbuugg.

       ALL bug reports should include:

       The version number of bbaasshh
       The hardware and operating system
       The compiler used to compile
       A description of the bug behaviour
       A short script or ‘recipe’ which exercises the bug

       _b_a_s_h_b_u_g inserts the first three items automatically into  the  template
       it provides for filing a bug report.

       Comments and bug reports concerning this manual page should be directed
       to _c_h_e_t_@_p_o_._c_w_r_u_._e_d_u.

BBUUGGSS
       It’s too big and too slow.

       There are some subtle differences between bbaasshh and traditional versions
       of sshh, mostly because of the PPOOSSIIXX specification.

       Aliases are confusing in some uses.

       Shell builtin commands and functions are not stoppable/restartable.

       Compound commands and command sequences of the form ‘a ; b ; c’ are not
       handled gracefully  when  process  suspension  is  attempted.   When  a
       process  is stopped, the shell immediately executes the next command in
       the sequence.  It suffices to place the sequence  of  commands  between
       parentheses  to  force  it  into  a subshell, which may be stopped as a
       unit.

       Commands inside of $$((...)) command substitution  are  not  parsed  until
       substitution  is attempted.  This will delay error reporting until some
       time after the command is entered.  For example, unmatched parentheses,
       even  inside  shell  comments,  will result in error messages while the
       construct is being read.

       Array variables may not (yet) be exported.



GNU Bash-3.2                   2006 September 28                       BASH(1)
